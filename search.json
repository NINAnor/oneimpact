[{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with the oneimpact package in R","text":"Anthropogenic disturbance often takes place landscapes already affected Infrastructure development land use change, leading cumulative impacts biodiversity. Typically, impact given type infrastructure determined computing distance nearest feature , ignoring potential cumulative impacts multiple features, can lead severe underestimations. oneimpact package collection tools functions intended aid estimation cumulative impacts ecological studies environmental impact assessments. version 0.1.0, main functions related calculation zone influence (ZoI) metrics based nearest influence cumulative influence multiple features given type infrastructure. calculating ZoI nearest feature cumulative ZoI multiple features using different ZoI shapes radii, possible use different metrics covariates ecological models evaluate strongly different infrastructure types affect ecological processes, impact spreads space, far reach, impact multiple features accumulate. approach described details Niebuhr et al. (submitted) exemplified document. discussion around impacts anthropogenic disturbance zone influence closely linked studies habitat amount fragmentation scale effect spatial variables species-habitat relationships, widely explored landscape ecology literature (e.g. Miguet et al., 2016; Huais, 2018). practical purposes, estimating ZoI anthropogenic disturbances similar estimating scale effect also taking account shape influence (.e. spatially weighted; Miguet et al., 2017). give overview functions oneimpact, define illustrate zone influence functions, show use main package functions, provide example use approach annotate data statistical analysis. install oneimpact package, possible use devtools::install_github() function: installed, now load oneimpact package packages used vignette.","code":"library(devtools) devtools::install_github(repo = \"NINAnor/oneimpact\", ref = \"HEAD\") library(oneimpact)  library(ggplot2) # for plots library(terra) # for spatial processing library(sf) # for spatial operations with vectors library(dplyr) # for data wrangling"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"overview-of-the-package","dir":"Articles","previous_headings":"","what":"Overview of the package","title":"Getting started with the oneimpact package in R","text":"oneimpact package two main functions calculate zones influence, functions calc_zoi_nearest() calc_zoi_cumulative(). Alternatively function calc_zoi() can calculate ZoI metrics run. functions’ main arguments type, defines shape spatial decay ZoI, zoi_radius, defines far influence expands space (fast decreases distance). functions can run R environment (R Core Team, 2021) GRASS GIS environment (GRASS Development Team, 2017). defined parameter . one hand, computations R generally fast easy--use, since make use optimized functions terra package (Hijmans, 2022). However, computations might become slow large maps. hand, GRASS GIS, possible compute ZoI large maps using software’s compiled tools, given GRASS GIS store maps computer’s memory. GRASS GIS, calculation ZoI requires active connection R session GRASS GIS location mapset (package rgrass7; Bivand, 2022), input maps already loaded within GRASS GIS mapset. Furthermore, GRASS GIS function returns name output map. map stored GRASS GIS location/mapset, might retrieved R rgrass::read_RAST() function exported outside GRASS using r..gdal module, instance. ZoI nearest feature (output calc_zoi_nearest()) based transformations map distance nearest feature. First, map computed terra::distance() function R r.grow.distance module GRASS. , ZoI functions applied transform maps zones influence. zone influence functions implemented oneimpact shown Table 1 might explored command help(zoi_functions). might also plotted 1 dimensional space plot_zoi1d() function, illustration behavior. Table 1: Main functions oneimpact used calculate zones influence. divided three types: zone influence functions (“ZoI functions”), functions compute ZoI raster maps (“Compute ZoI”), functions create filters weight matrices use computation cumulative ZoI (“Create filters”). cumulative ZoI multiple features (output calc_zoi_cumulative()) based neighborhood analysis using spatial filters determine ZoI functions. ZoI functions might used calc_zoi_nearest() calc_zoi_cumulative(), accounting different ZoI shapes radii, latter used create weight matrices input neighborhood analysis. function already built-choices ZoI functions determine weight matrix. weight matrices might created function create_filter(). function calc_zoi_cumulative() computes neighborhood analysis terra::focal() function R one modules GRASS GIS: r.mfilter, r.resamp.filter, r.neighbors. module used might determined user (parameter module).","code":""},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"the-concept-of-zone-of-influence","dir":"Articles","previous_headings":"","what":"The concept of zone of influence","title":"Getting started with the oneimpact package in R","text":"zone influence (ZoI) function \\(\\phi\\) informs impact given infrastructure feature, source disturbance, landscape element decreases distance. Formally, ZoI \\(\\phi = f(d, r)\\) decay function maximum value 1 disturbance located, decreases towards zero distance \\(d\\) increases, possibly vanishes given point, ZoI radius \\(r\\). Broadly speaking, ZoI characterized shape radius. Four sets functions implemented oneimpact: threshold decay, linear decay, exponential decay, Gaussian decay. functions present definition multiple function names, accommodate different algorithms call functions (e.g. linear_decay() bartlett_decay() represent function).","code":""},{"path":[]},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"functions-with-a-well-defined-zoi-radius","dir":"Articles","previous_headings":"The concept of zone of influence > ZoI functions","what":"Functions with a well-defined ZoI radius","title":"Getting started with the oneimpact package in R","text":"functions vanish certain non-infinite distance therefore present well-defined ZoI radii. ZoI radius \\(r\\) represents distance \\(\\phi = 0\\). Two functions type implemented oneimpact: threshold linear decay functions.","code":""},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"threshold-decay-function","dir":"Articles","previous_headings":"The concept of zone of influence > ZoI functions > Functions with a well-defined ZoI radius","what":"Threshold decay function","title":"Getting started with the oneimpact package in R","text":"threshold function constant distance \\(d\\) infrastructure source disturbance smaller ZoI radius \\(r\\), zero beyond . can computed using threshold_decay() step_decay() functions: visualize function shape 1 dimension space, make use function plot_zoi1d(). plot assumes source disturbance located \\(x = 0\\) distance increases sides x axis: Illustration threshold decay ZoI ZoI radius = 10.","code":"# threshold ZoI with radius = 10 threshold_decay(5, zoi_radius = 10) # within the radius #> [1] 1 threshold_decay(10, zoi_radius = 10) # at or beyond the radius #> [1] 0 # threshold ZoI with radius = 10 plot_zoi1d(points = 0, zoi_radius = 10, fun = threshold_decay, range_plot = c(-20, 20))"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"linear-decay-function","dir":"Articles","previous_headings":"The concept of zone of influence > ZoI functions > Functions with a well-defined ZoI radius","what":"Linear decay function","title":"Getting started with the oneimpact package in R","text":"linear decay (also Bartlett tent decay) function decreases linearly distance \\(d\\) infrastructure source disturbance becomes zero beyond ZoI radius \\(r\\). can computed using following functions: linear_decay(), bartlett_decay, tent_decay(). show use function: visualize function shape 1 dimension space using function plot_zoi1d(): Illustration linear decay ZoI ZoI radius = 10.","code":"# linear decay ZoI with radius = 10 linear_decay(5, zoi_radius = 10) # within the radius #> [1] 0.5 linear_decay(10, zoi_radius = 10) # at or beyond the radius #> [1] 0 # threshold ZoI with radius = 10 plot_zoi1d(points = 0, zoi_radius = 10, fun = linear_decay, range_plot = c(-20, 20))"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"functions-that-do-not-vanish-with-distance","dir":"Articles","previous_headings":"The concept of zone of influence > ZoI functions","what":"Functions that do not vanish with distance","title":"Getting started with the oneimpact package in R","text":"functions decrease vanish distance infrastructure increases. cases define ZoI radius \\(r\\) distance ZoI decreases \\(\\phi = \\phi_{limit}\\), arbitrary small ZoI value beyond influence infrastructure considered negligible. cases, ZoI definition needs extra parameter defined \\(\\phi = f(d, r, \\phi_{limit})\\). Two functions type implemented oneimpact: exponential decay Gaussian decay functions.","code":""},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"exponential-decay-function","dir":"Articles","previous_headings":"The concept of zone of influence > ZoI functions > Functions that do not vanish with distance","what":"Exponential decay function","title":"Getting started with the oneimpact package in R","text":"exponential decay function decays exponentially distance \\(d\\) infrastructure, rate decay set \\(\\phi = \\phi_{limit}\\) ZoI radius (\\(d = r\\)). exponential decay might calculated using exp_decay() function: possible see, exponential decay ZoI zoi_radius = 10 imply function null beyond ZoI radius, goes zoi_limit. default, zoi_limit = 0.05, value might changed user (e.g. 0.01 small value). Changing zoi_limit changes interpretation ZoI radius parameter, though: visualize function shape 1 dimension space: Illustration exponential decay ZoI ZoI radius = 10 ZoI limit = 0.05. add plot horizontal dashed line zoi_limit = 0.05 vertical dashed lines x = 10 x = -10 (since zoi_radius = 10), show ZoI radius represent distance ZoI reaches zoi_limit.","code":"# exponential decay ZoI with radius = 10 exp_decay(5, zoi_radius = 10) # within the radius #> [1] 0.2236068 exp_decay(10, zoi_radius = 10) # at the radius #> [1] 0.05 exp_decay(15, zoi_radius = 10) # beyond the radius #> [1] 0.01118034 # changing zoi_limit changes the interpretation of zoi_radius exp_decay(5, zoi_radius = 10, zoi_limit = 0.01) # within the radius #> [1] 0.1 exp_decay(10, zoi_radius = 10, zoi_limit = 0.01) # at the radius #> [1] 0.01 exp_decay(15, zoi_radius = 10, zoi_limit = 0.01) # beyond the radius #> [1] 0.001 # threshold ZoI with radius = 10 plot_zoi1d(points = 0, zoi_radius = 10, fun = exp_decay, range_plot = c(-20, 20)) +   geom_hline(yintercept = 0.05, linetype = 2, color = \"grey\") +   geom_vline(xintercept = c(-10, 10), linetype = 2, color = \"grey\")"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"gaussian-decay-function","dir":"Articles","previous_headings":"The concept of zone of influence > ZoI functions > Functions that do not vanish with distance","what":"Gaussian decay function","title":"Getting started with the oneimpact package in R","text":"Gaussian (half-normal) decay function decays following half normal shape, rate decay set \\(\\phi = \\phi_{limit}\\) ZoI radius (\\(d = r\\)). Gaussian decay might calculated using gaussian_decay() half_norm_decay() functions: visualize function shape 1 dimension space: Illustration Gaussian decay ZoI ZoI radius = 10 ZoI limit = 0.05. Notice , even though ZoI radius \\(r\\) defined functions, change shape strongly modifies interpretation ZoI changes distance. functions set might used calculate ZoI nearest feature define weight matrices calculate cumulative ZoI multiple features.","code":"# Gaussian decay ZoI with radius = 10 gaussian_decay(5, zoi_radius = 10) # within the radius #> [1] 0.4728708 gaussian_decay(10, zoi_radius = 10) # at or beyond the radius #> [1] 0.05 gaussian_decay(15, zoi_radius = 10) # at or beyond the radius #> [1] 0.001182177 # threshold ZoI with radius = 10 plot_zoi1d(points = 0, zoi_radius = 10, fun = gaussian_decay, range_plot = c(-20, 20)) +   geom_hline(yintercept = 0.05, linetype = 2, color = \"grey\") +   geom_vline(xintercept = c(-10, 10), linetype = 2, color = \"grey\")"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"zoi-metrics","dir":"Articles","previous_headings":"The concept of zone of influence","what":"ZoI metrics","title":"Getting started with the oneimpact package in R","text":"Given ZoI function set specific shape ZoI radius, two metrics might calculated zone influence: ZoI nearest feature alone cumulative ZoI multiple features. exemplify difference, illustrate using Gaussian decay ZoI 1 dimension space using plot_zoi1d() function. set four sources disturbance (e.g. houses) located x = 0, x = 2, x = 8, x = 12, set ZoI radius feature zoi_radius = 3. start plotting ZoI nearest feature alone setting cumulative = FALSE:  location disturbance sources shown vertical dashed lines. Notice maximum value ZoI nearest feature 1. Now considering ZoI feature accumulates. setting cumulative = TRUE plot_zoi1d():  Notice maximum value cumulative ZoI multiple features might higher 1 ZoI different features overlap.","code":"disturbance_locations <- c(0, 2, 8, 12) plot_zoi1d(points = disturbance_locations, zoi_radius = 3, fun = gaussian_decay,            cumulative = FALSE, range_plot = c(-10, 20)) +   labs(x = \"Space\") +   geom_vline(xintercept = disturbance_locations, linetype = 2, color = \"grey\") #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` plot_zoi1d(points = disturbance_locations, zoi_radius = 3, fun = gaussian_decay,            cumulative = TRUE, range_plot = c(-10, 20)) +   labs(x = \"Space\") +   geom_vline(xintercept = disturbance_locations, linetype = 2, color = \"grey\") #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4`"},{"path":[]},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"define-the-input-raster-map","dir":"Articles","previous_headings":"Calculating the ZoI metrics for rasters","what":"Define the input raster map","title":"Getting started with the oneimpact package in R","text":"calculate ZoI metrics 2 dimensional raster objects, use functions calc_zoi_nearest() calc_zoi_cumulative(). give example, present data set location private cabins Norway, subset small study region Southern Norway. data mapped points vector format; information might found using command help(cabins_vect.gpkg). read vector file using package terra: Location private cabins study area Souther Norway. input map already raster format, can used directly calc_zoi_*() functions. case, since vector format, must rasterized first. many types anthropogenic infrastructure disturbance represented lines polygons (e.g. roads, power lines, areas deforestation), enough create binary raster dummy variable value 1 disturbance located 0 (NA) elsewhere. point representation infrastructure, though, might interesting count number features per pixel. create raster number cabins per pixel, use function terra::rasterize() parameter \\(\\verb|fun = length|\\). load another raster 100 m resolution area use grid rasterization process. Raster number private cabins per pixel, used input calculating ZoI metrics. map presents number cabins pixel NA cabins. GRASS GIS, possible use ancillary oneimpact function grass_v2rast_count() count number features vector pixel get output raster object.","code":"# file path s <- system.file(\"vector/cabins_vect.gpkg\", package = \"oneimpact\") # read file cabins_vect <- terra::vect(s) # check cabins_vect #>  class       : SpatVector  #>  geometry    : points  #>  dimensions  : 6875, 4  (geometries, attributes) #>  extent      : 146900.1, 194694.6, 6622822, 6658891  (xmin, xmax, ymin, ymax) #>  source      : cabins_vect.gpkg #>  coord. ref. : ETRS89 / UTM zone 33N (EPSG:25833)  #>  names       :    cat byggtyp_nbr kommune value #>  type        :  <int>       <chr>   <int> <int> #>  values      : 131621         161     604     1 #>                131623         161     604     1 #>                131627         161     604     1 # plot plot(cabins_vect, cex = 0.5) # load grid s2 <- system.file(\"raster/cabins.tif\", package = \"oneimpact\") grid <- terra::rast(s2) # rasterize cabins_rast <- terra::rasterize(cabins_vect, grid, fun = length) cabins_rast #> class       : SpatRaster  #> dimensions  : 361, 478, 1  (nrow, ncol, nlyr) #> resolution  : 100, 100  (x, y) #> extent      : 146900, 194700, 6622800, 6658900  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs  #> source      : memory  #> name        : cabins  #> min value   :      1  #> max value   :      8 # plot plot(cabins_rast)"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"calculate-the-zoi-of-the-nearest-feature-only","dir":"Articles","previous_headings":"Calculating the ZoI metrics for rasters","what":"Calculate the ZoI of the nearest feature only","title":"Getting started with the oneimpact package in R","text":"map might used input calc_zoi_nearest(). function, important background input raster map (pixels cabins) NA (-data). calculate ZoI nearest feature using Gaussian shaped ZoI radius = 1000 m. default, computation done R (parameter \\(\\verb|= \"R\"|\\)). Zone influence nearest feature private cabins, using Gaussian ZoI radius = 1000 m. shape ZoI might changed parameter type, using functions presented . parameter might also set \\(\\verb|type = \"euclidean\"|\\) computation Euclidean distance nearest feature \"log\" \"sqrt\" log- sqrt-transformed distance nearest feature.","code":"# calculate ZoI cabins_nearest <- calc_zoi_nearest(cabins_rast, zoi_radius = 1000, type = \"Gauss\") # plot plot(cabins_nearest)"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"calculate-the-cumulative-zoi-of-multiple-features","dir":"Articles","previous_headings":"Calculating the ZoI metrics for rasters","what":"Calculate the cumulative ZoI of multiple features","title":"Getting started with the oneimpact package in R","text":"Differently calc_zoi_nearest(), input raster map calc_zoi_cumulative() present zeros background (pixels cabins). R, background NA values might checked reclassified zero using \\(\\verb|zeroAsNA = TRUE|\\) parameter, GRASS GIS implemented case, easiest procedure prepare input raster map outside GRASS make use module r.null managing -data values rasters within GRASS. calculate cumulative ZoI multiple features using setup – Gaussian shaped ZoI radius = 1000 m. Cumulative zone influence multiple features private cabins, using Gaussian ZoI radius = 1000 m. Notice output map differs considerably ZoI nearest feature . shape ZoI might also changed parameter type, using functions presented . Alternatively, customized weight matrix might defined user used zoi_radius parameter, case user must set \\(\\verb|type = \"mfilter\"|\\). functions define weight matrices might set e.g. terra::focalMat() (Hijmans, 2022) smoothie::kernel2dmeitsjer() (Gilleland, 2013) functions. Notice, however, functions parameterized differently, reference ZoI radius ones defined oneimpact. calc_zoi_cumulative(), user might choose computing cumulative ZoI metric \\(\\verb|output_type = \"cumulative_zoi\"|\\) (default), density features \\(\\verb|output_type = \"density\"|\\). cumulative ZoI (distance weighted) number features per unit space, might assumes values much higher one features located closer ZoI (see Figs. D6 D10). calculation density features, hand, occurs normalization weight matrix, values sum 1. consequence, density features generally presents values lower close 1. measures represent spatial variation, interpretation values different.","code":"# calculate ZoI cabins_cumul <- calc_zoi_cumulative(cabins_rast, zoi_radius = 1000, type = \"gaussian_decay\",                                     zeroAsNA = TRUE) # plot plot(cabins_cumul)"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"using-the-zoi-approach-to-annotate-and-analyze-data","dir":"Articles","previous_headings":"","what":"Using the ZoI approach to annotate and analyze data","title":"Getting started with the oneimpact package in R","text":"cumulative impact assessment proposed oneimpact, calculation ZoI (\\(\\phi\\)) done statistical analysis. formulation, \\(\\phi\\) defined based different shapes radii considered different covariates (Fig. D). Therefore, evaluation impact multiple infrastructure features accumulate identification ZoI shape radius recasted model selection rather parameterization problem. Workflow calculating infrastructure ZoI estimating cumulative impact ZoI radius multiple infrastructure. Infrastructure raster data input calc_zoi_*() functions, allow calculation ZoI nearest feaure cumulative ZoI based arguments ZoI shape radius. output influence rasters environmental data annotated biological data, infrastructure type ZoI metric defined shape radius considered different covariate. annotated data analyzed estimate effect size Zoi radius infrastructure type calculate impact . Figure D shows workflow calculating ZoI metrics using annotate biological data estimation cumulative impacts. calculation ZoI nearest feature cumulative ZoI might done different ZoI shapes, radii, infrastructure type, combinations turn different covariate annotated biological data ecological modeling. simulate data set sampling points theoretical random biological response variable show process calculation ZoI variables annotation biological data. First create study area \\(n = 40\\) random locations representing sampling points given response variable z (e.g. species richness abundance). sample locations using set_points() function package oneimpact simulate response variable z Poisson distributed random variable mean \\(\\lambda = 10\\). simulated sampled data shown Fig. D. Simulated sampling points (red) study area. Black dots represent location private cabins. Now use procedure presented calculate ZoI nearest feature cumulative ZoI different radii. use exponential decay ZoI vary ZoI radius 500 m 1500 m. can combine ZoI variables visualize : ZoI nearest cabin cumulative ZoI multiple cabins exponential decay ZoI radius = 500, 1000, 1500 m. Finally, ZoI variables can used annotate biological data statistical analysis. point, biological data can also annotated ZoI disturbance variables environmental covariates used input estimation effect sizes \\(\\beta\\) evaluation cumulative effects different types infrastructure statistical models (Fig. D) Statistical analyses can make use model selection (Burnham & Anderson, 2002; Jackson & Fahrig, 2015; Huais, 2018), penalized regression (Lee et al., 2020), machine learning approaches, example (James et al., 2021). statistical modeling procedures beyond scope oneimpact.","code":"# get extent of the study area extent <- terra::ext(cabins_rast) # sample n = 40 random locations and simulate biological data bio_data <- set_points(40, method = \"random\", res = 100,                         extent_x = extent[c(1,2)], extent_y = extent[c(3,4)]) %>%   .$pts %>% # get only coordinates   sf::st_as_sf(coords = c(1,2), crs = crs(cabins_rast)) %>% # change to sf object   dplyr::mutate(id = 1:40, z = rpois(40, lambda = 10)) %>% # add id and simulate response z    terra::vect() # transform to vect to use with SpatRaster object # plot plot(cabins_vect, cex = 0.5) plot(bio_data, col = \"red\", add = T) # radii radii <- c(500, 1000, 1500) # exp decay ZoI - nearest zoi_exp_nearest <- calc_zoi_nearest(cabins_rast, zoi_radius = radii,                                     type = \"exp_decay\") # exp decay ZoI - cumulative zoi_exp_cumul <- calc_zoi_cumulative(cabins_rast, zoi_radius = radii,                                      type = \"exp_decay\", zeroAsNA = TRUE) # combine ZoI variables zoi_all <- c(zoi_exp_nearest, zoi_exp_cumul) # plot plot(zoi_all) # extract values zoi_sampling_pts <- terra::extract(zoi_all, bio_data) # combine response variable with extracted data bio_data_annotated <- dplyr::left_join(as.data.frame(bio_data, geom = \"XY\"),                                         zoi_sampling_pts, by = c(\"id\" = \"ID\")) # show annotated data head(bio_data_annotated) #>   id  z        x       y zoi_nearest_exp_decay500 zoi_nearest_exp_decay1000 #> 1  1  8 160278.9 6639072             1.503683e-01               0.387773557 #> 2  2 13 151777.9 6635201             6.195536e-03               0.078711727 #> 3  3  9 150575.5 6651349             1.445069e-05               0.003801407 #> 4  4  7 185772.3 6629945             6.859989e-02               0.261915800 #> 5  5  8 154899.6 6654570             4.143068e-04               0.020354527 #> 6  6  8 183084.1 6651101             5.492803e-01               0.741134449 #>   zoi_nearest_exp_decay1500 zoi_cumulative_exp_decay500 #> 1                0.53176383                 0.301046218 #> 2                0.18366495                 0.006195536 #> 3                0.02435732                 0.000000000 #> 4                0.40936226                 0.079030987 #> 5                0.07454880                 0.000000000 #> 6                0.81896373                17.137459613 #>   zoi_cumulative_exp_decay1000 zoi_cumulative_exp_decay1500 #> 1                  1.538413390                    3.7777969 #> 2                  0.160634268                    0.5302938 #> 3                  0.007310715                    0.2360259 #> 4                  0.446259670                    1.0708807 #> 5                  0.049178812                    0.3288052 #> 6                 43.177365150                   66.7402132"},{"path":"https://ninanor.github.io/oneimpact/articles/getting_started_oneimpact_R.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Getting started with the oneimpact package in R","text":"Bivand, R. (2022). rgrass7: Interface GRASS Geographical Information System R. R package version 0.2-10. https://CRAN.R-project.org/package=rgrass7 Burnham, K. P., & Anderson, D. R. (2002). Model selection multimodel inference: practical information-theoretic approach (2nd ed). Springer. Gilleland, E. (2013). Two-dimensional kernel smoothing: Using R package smoothie. NCAR Technical Note, TN-502+STR, 17pp., doi:10.5065/D61834G2. GRASS Development Team (2017) Geographic Resources Analysis Support System (GRASS GIS) Software, Version 7.8. Open Source Geospatial Foundation. Hijmans, R. J. (2022). terra: Spatial Data Analysis. R package version 1.5-21. https://CRAN.R-project.org/package=terra Huais, P. Y. (2018). multifit: R function multi-scale analysis landscape ecology. Landscape Ecology, 33(7), 1023–1028. https://doi.org/10.1007/s10980-018-0657-5 Jackson, H. B., & Fahrig, L. (2015). ecologists conducting research optimal scale? Global Ecology Biogeography, 24(1), 52–63. https://doi.org/10.1111/geb.12233 James, G., Witten, D., Hastie, T., & Tibshirani, R. (2021). introduction statistical learning: applications R (Second edition). Springer. Lee, Y., Alam, M., Sandström, P., & Skarin, . (2020). Estimating zones influence using threshold regression. Working Papers Transport, Tourism, Information Technology Microdata Analysis, 2020:01, 1–16. Miguet, P., Jackson, H. B., Jackson, N. D., Martin, . E., & Fahrig, L. (2016). determines spatial extent landscape effects species? Landscape Ecology, 31(6), 1177–1194. https://doi.org/10.1007/s10980-015-0314-1 Miguet, P., Fahrig, L., & Lavigne, C. (2017). quantify distance‐dependent landscape effect biological response. Methods Ecology Evolution, 8(12), 1717–1724. https://doi.org/10.1111/2041-210X.12830 Niebuhr, B. B., van Moorter, B., Stien, ., Tveraa, T., Strand, O., Langeland, K., Alam, M., Skarin, ., & Panzacchi, M. Estimating cumulative impact zone influence anthropogenic infrastructure biodiversity. Submitted manuscript. R Core Team (2021). R: language environment statistical computing. R Foundation Statistical Computing, Vienna, Austria. https://www.R-project.org/.","code":""},{"path":"https://ninanor.github.io/oneimpact/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bernardo Niebuhr. Author, maintainer. Manuela Panzacchi. Author. Bram van Moorter. Author.","code":""},{"path":"https://ninanor.github.io/oneimpact/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Niebuhr B, Panzacchi M, van Moorter B (2022). oneimpact: Tools assessment cumulative impacts anthropogenic infrastructure ecological studies. https://github.com/NINAnor/oneimpact, https://ninanor.github.io/oneimpact/.","code":"@Manual{,   title = {oneimpact: Tools for the assessment of cumulative impacts of anthropogenic infrastructure on ecological studies},   author = {Bernardo Niebuhr and Manuela Panzacchi and Bram {van Moorter}},   year = {2022},   note = {https://github.com/NINAnor/oneimpact, https://ninanor.github.io/oneimpact/}, }"},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"oneimpact","dir":"","previous_headings":"","what":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"oneimpact provides tools assessment cumulative impacts multiple infrastructure land use modification ecological studies. tools use R interface main calculations might run R GRASS GIS. tools available far :","code":""},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"zone-of-influence-zoi-decay-functions","dir":"","previous_headings":"","what":"Zone of influence (ZoI) decay functions","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"zoi_functions: set decay zone influence functions characterize different shapes ZoI around infrastructure, parameterized based zone influence radius. functions implemented far : threshold (threshold_decay step_decay), linear decay (linear_decay bartlett_decay tent_decay), exponential decay (exp_decay), Gaussian decay (gaussian_decay half_norm_decay). plot_zoi1d: plot ZoI 1 dimensional space multiple points infrastructure, using ZoI nearest feature cumulative ZoI metric.","code":""},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"compute-zones-of-influence-zoi","dir":"","previous_headings":"","what":"Compute zones of influence (ZoI):","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"calc_zoi_nearest: Calculate zone influence nearest infrastructure, according multiple possible decay functions zones influence radii. calc_zoi_cumulative: Calculate cumulative zone influence multiple features, according multiple possible decay functions zones influence radii. calc_zoi: Calculate ZoI nearest infrastructure cumulative ZoI, multiple scales zones influence radii.","code":""},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"spatial-filters","dir":"","previous_headings":"","what":"Spatial filters:","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"create_filter: Create filters weight matrices neighborhood analysis, according different decay functions parameterized using zone influence radius. save_filter: Saves filters/weight matrices outside R use within GRASS GIS modules.","code":""},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"ancillary-functions","dir":"","previous_headings":"","what":"Ancillary functions:","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"grass_binarize: Binarize continuous multi-class categorical rasters within GRASS GIS. Binary maps may used input cumulative zone influence kernel density calculation. grass_v2rast_count: Rasterize vector files counting number features within pixel output raster. Count rasters may used input cumulative zone influence kernel density calculation.","code":""},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"support-for-landscape-simulation","dir":"","previous_headings":"","what":"Support for landscape simulation:","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"set_points: simulate points landscape according different rules spatial patterns.","code":""},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"install development version oneimpact R package, please use:","code":"library(devtools) devtools::install_github(\"NINAnor/oneimpact\", ref = \"HEAD\")"},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"see-also","dir":"","previous_headings":"","what":"See also","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"oneimpact functions greatly based neighborhood analyses made terra package R three GRASS GIS modules: r.mfilter, r.resamp.filter, r.neighbors. connection R GRASS GIS made rgrass7 R package.","code":""},{"path":"https://ninanor.github.io/oneimpact/index.html","id":"meta","dir":"","previous_headings":"","what":"Meta","title":"Tools for the assessment of cumulative impacts of anthropogenic \n    infrastructure on ecological studies","text":"Please report issues bugs. License: GPL3 Get citation information oneimpact R running citation(package = 'oneimpact') Contributions mostly welcome!","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins.tif.html","id":null,"dir":"Reference","previous_headings":"","what":"Cabin presence raster data — cabins.tif","title":"Cabin presence raster data — cabins.tif","text":"Raster data indicating pixels presence tourist private cabins Norway. corresponds specific building types (object_type = \"Bygning\", byggtyp_nbr = c(\"161\", \"162\", \"163\")) form public N50 dataset. original data consisted point vector data rasterized 100m r esolution, purpose illustration . raster cut study area presented oneimpact package.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins.tif.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cabin presence raster data — cabins.tif","text":"Geotiff file. Projected CRS: ETRS89 / UTM zone 33N. 1: Presence cabins NA: presence cabins","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins.tif.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cabin presence raster data — cabins.tif","text":"https://register.geonorge./det-offentlige-kartgrunnlaget/n50-kartdata/ea192681-d039-42ec-b1bc-f3ce04c189ac","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins.tif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cabin presence raster data — cabins.tif","text":"","code":"(f <- system.file(\"raster/cabins.tif\", package = \"oneimpact\")) #> [1] \"/home/runner/work/_temp/Library/oneimpact/raster/cabins.tif\" terra::rast(f) #> class       : SpatRaster  #> dimensions  : 361, 478, 1  (nrow, ncol, nlyr) #> resolution  : 100, 100  (x, y) #> extent      : 146900, 194700, 6622800, 6658900  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs  #> source      : cabins.tif  #> name        : cabins  #> min value   :      1  #> max value   :      1"},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_count.tif.html","id":null,"dir":"Reference","previous_headings":"","what":"Cabin count raster data — cabins_count.tif","title":"Cabin count raster data — cabins_count.tif","text":"Raster data indicating number tourist private cabins per pixel Norway. corresponds specific building types (object_type = \"Bygning\", byggtyp_nbr = c(\"161\", \"162\", \"163\")) form public N50 dataset. original data consisted point vector data rasterized 100m resolution counting number cabins pixel. raster cut study area presented oneimpact package.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_count.tif.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cabin count raster data — cabins_count.tif","text":"Geotiff file. Projected CRS: ETRS89 / UTM zone 33N.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_count.tif.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cabin count raster data — cabins_count.tif","text":"https://register.geonorge./det-offentlige-kartgrunnlaget/n50-kartdata/ea192681-d039-42ec-b1bc-f3ce04c189ac","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_count.tif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cabin count raster data — cabins_count.tif","text":"","code":"(f <- system.file(\"raster/cabins_count.tif\", package = \"oneimpact\")) #> [1] \"/home/runner/work/_temp/Library/oneimpact/raster/cabins_count.tif\" terra::rast(f) #> class       : SpatRaster  #> dimensions  : 361, 478, 1  (nrow, ncol, nlyr) #> resolution  : 100, 100  (x, y) #> extent      : 146900, 194700, 6622800, 6658900  (xmin, xmax, ymin, ymax) #> coord. ref. : +proj=utm +zone=33 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs  #> source      : cabins_count.tif  #> name        : cabins  #> min value   :      0  #> max value   :      8"},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_vect.gpkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Cabins vector data — cabins_vect.gpkg","title":"Cabins vector data — cabins_vect.gpkg","text":"Dataset containing location tourist private cabins Southern Norway, within study area oneimpact package. corresponds specific building types (object_type = \"Bygning\", byggtyp_nbr = c(\"161\", \"162\", \"163\")) form public N50 dataset. map cut study area presented oneimpact package.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_vect.gpkg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cabins vector data — cabins_vect.gpkg","text":"geopackage file. Projected CRS: ETRS89 / UTM zone 33N. vector file presents following columns: cat: Line number, corresponding original dataset byggtyp_nbr: Type building (code) original dataset kommune: Code municipality cabin located value: Value 1, used rasterization purposes","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_vect.gpkg.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Cabins vector data — cabins_vect.gpkg","text":"https://register.geonorge./det-offentlige-kartgrunnlaget/n50-kartdata/ea192681-d039-42ec-b1bc-f3ce04c189ac","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/cabins_vect.gpkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cabins vector data — cabins_vect.gpkg","text":"","code":"(s <- system.file(\"vector/cabins_vect.gpkg\", package = \"oneimpact\")) #> [1] \"/home/runner/work/_temp/Library/oneimpact/vector/cabins_vect.gpkg\" sf::st_read(s) #> Reading layer `cabins_vect' from data source  #>   `/home/runner/work/_temp/Library/oneimpact/vector/cabins_vect.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 6875 features and 4 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 146900.1 ymin: 6622822 xmax: 194694.6 ymax: 6658891 #> Projected CRS: ETRS89 / UTM zone 33N # or terra::vect(s) #>  class       : SpatVector  #>  geometry    : points  #>  dimensions  : 6875, 4  (geometries, attributes) #>  extent      : 146900.1, 194694.6, 6622822, 6658891  (xmin, xmax, ymin, ymax) #>  source      : cabins_vect.gpkg #>  coord. ref. : ETRS89 / UTM zone 33N (EPSG:25833)  #>  names       :    cat byggtyp_nbr kommune value #>  type        :  <int>       <chr>   <int> <int> #>  values      : 131621         161     604     1 #>                131623         161     604     1 #>                131627         161     604     1"},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the zone of influence from the nearest feature\nand the cumulative zone of influence of multiple features — calc_zoi","title":"Calculates the zone of influence from the nearest feature\nand the cumulative zone of influence of multiple features — calc_zoi","text":"function takes raster locations infrastructure calculates (1) raster representing distance pixel neareast feature (2) raster (set rasters, case one value scale) representing density features space (spatial filter/neighborhood analysis). neighborhood analysis done raster::focal() function.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the zone of influence from the nearest feature\nand the cumulative zone of influence of multiple features — calc_zoi","text":"","code":"calc_zoi(   x,   zoi_radius,   transform_nearest = NULL,   type_cumulative = c(\"circle\", \"Gauss\", \"rectangle\", \"mfilter\")[1],   extent_x_cut = bbox(x)[1, ],   extent_y_cut = bbox(x)[2, ],   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the zone of influence from the nearest feature\nand the cumulative zone of influence of multiple features — calc_zoi","text":"x [RasterLayer,SpatRaster]  Raster representing locations features, preferentially value 1 (positive value) features located NA elsewhere. Alternatively, x might binary (dummy) spatial variable representing presence linear area features, NA/-data background. x can RasterLayer raster package SpatRaster terra package. = \"GRASS\", x must string corresponding name input map within GRASS GIS location mapset. Maps without NA background might prepared input calc_zoi_nearest raster algebra R e.g. use module r.null GRASS GIS. zoi_radius [numeric(1)]  Zone Influence (ZoI) radius, distance ZoI vanishes goes given minimum limit value zoi_limit. See zoi_functions details. parameter ignored type = \"euclidean\", type = \"log\", type = \"sqrt\". extent_x_cut [numeric vector(2)=c(0,1)]  Vector representing minimum maximum extent x y final output, format c(min,max). intended keep region interest, standardizing parameters region comparing resulting ZoI maps cumulative ZoI, calculated calc_zoi_cumulative. ... Adittional parameters passed terra::distance() ZoI functions (see zoi_functions) calculations performed R. additional parameters implemented computation GRASS GIS.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the zone of influence from the nearest feature\nand the cumulative zone of influence of multiple features — calc_zoi","text":"RasterBrick de distance nearest feature densities scales selected.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculates the zone of influence from the nearest feature\nand the cumulative zone of influence of multiple features — calc_zoi","text":"neighborhood analysis can done different methods. default Gaussian filter (type_density = \"Gauss\"), case scale corresponds sigma paramater Gaussian filter. type_density = \"circle\" type_density = \"rectangle\", scale corresponds radius circle width rectangle, respectively. See raster::focalWeight() details. IMPROVE2: communication GRASS GIS.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the zone of influence from the nearest feature\nand the cumulative zone of influence of multiple features — calc_zoi","text":"","code":"library(mobsim) #> Error in library(mobsim): there is no package called ‘mobsim’ library(raster) #> Loading required package: sp  set.seed(1234)  # set points ext <- 30000 wd <- ext/20 pts <- set_points(n_features = 1000, centers = 1,                   width = wd, res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext),                   buffer_around = 10000) #> Error in loadNamespace(x): there is no package called ‘mobsim’ plot(pts$pts) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found plot(pts$rast) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found  # calculate distance and densities considering only the initial extent zoi_values <- c(250, 500, 1000, 2500, 5000)/2 nearest_cumulative <- calc_zoi(pts$rast, zoi = zoi_values,                                      type_cumulative = \"Gauss\",                                      extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in calc_zoi(pts$rast, zoi = zoi_values, type_cumulative = \"Gauss\",     extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)): could not find function \"calc_zoi\" plot(nearest_cumulative) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'nearest_cumulative' not found  # calculate exp_decay (the rest is equal) log_dist_dens <- calc_zoi(pts$rast, type_density = \"Gauss\", scale = scales,                                 transform_dist = \"exp_decay\", half_life = 200,                                 extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in calc_zoi(pts$rast, type_density = \"Gauss\", scale = scales, transform_dist = \"exp_decay\",     half_life = 200, extent_x_cut = c(0, ext), extent_y_cut = c(0,         ext)): could not find function \"calc_zoi\" plot(log_dist_dens) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'log_dist_dens' not found   # set points ext <- 30000 wd <- ext/20 pts <- set_points(n_features = 1000, centers = 1,                   width = wd, res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext),                   buffer_around = 0) #> Error in loadNamespace(x): there is no package called ‘mobsim’ plot(pts$pts) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found plot(pts$rast) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found  # calculate distance and densities considering only the initial extent scales <- c(250, 500, 1000, 2500, 5000)/2 dist_dens <- calc_zoi(pts$rast, type_density = \"Gauss\", scale = scales, pad = T) #> Error in calc_zoi(pts$rast, type_density = \"Gauss\", scale = scales, pad = T): could not find function \"calc_zoi\" plot(dist_dens) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'dist_dens' not found"},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"function takes raster locations counts infrastructure calculates raster (set rasters, case one value zoi_radius) representing cumulative zone influence (ZoI) density features space. process done spatial filter/moving window/neighborhood analysis. ZoI weight matrix defined zone influence functions, might follow different shapes cover area according ZoI radius. details, see zoi_functions. procedure might computed R GRASS GIS. R, neighborhood analysis done terra::focal function. GRASS, different modules might used computation: r.resamp.filter, r.mfilter, r.neighbors. See details differences. GRASS, requires active connection R session GRASS GIS location mapset (package rgrass7), input maps already loaded within GRASS GIS mapset. calculations done R, input (set ) raster map(s) function returns another (set ) raster map(s). calculations done within GRASS GIS, input name raster map already loaded GRASS GIS location mapset, function returns name output map. map stored GRASS GIS location/mapset, might retrieved R rgrass7::read_RAST function exported outside GRASS using r..gdal module, instance.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"","code":"calc_zoi_cumulative(   x,   zoi_radius = 100,   type = c(\"circle\", \"Gauss\", \"rectangle\", \"exp_decay\", \"bartlett\", \"threshold\",     \"mfilter\")[1],   where = c(\"R\", \"GRASS\")[1],   module = c(\"r.mfilter\", \"r.resamp.filter\", \"r.neighbors\")[1],   output_type = c(\"cumulative_zoi\", \"density\")[1],   zoi_limit = 0.05,   min_intensity = 0.01,   max_dist = 50000,   zeroAsNA = FALSE,   extent_x_cut = NULL,   extent_y_cut = NULL,   na.policy = \"omit\",   na.rm = TRUE,   plotit = FALSE,   output_map_name = NULL,   input_as_region = FALSE,   remove_intermediate = TRUE,   overwrite = FALSE,   quiet = TRUE,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"x [RasterLayer,SpatRaster,character]  Raster representing locations features, preferentially binary map 1 features located (counts features within pixel) 0 elsewhere. Alternatively, x might binary (dummy) spatial variable representing presence linear area features. x can RasterLayer raster package SpatRaster terra package. = \"GRASS\", x must string corresponding name input map within GRASS GIS location mapset. Continuous discrete raster maps multiple categories can binarized used input calc_zoi_cumulative landscapetools::util_binarize R util_binarize_grass GRASS GIS, common raster algebra environments. zoi_radius [numeric(1)=100]  Radius scale moving window neighborhood analysis, used calculate cumulative zoi density. can single value vector values, case several cumulative ZoI density maps (one radius) created. type = \"circle\", zoi_radius corresponds radius circle filter. type = \"Gauss\" type = \"exp_decay\", zoi_radius corresponds distance Gaussian exponential decay function decrease small zoi_limit value. type = \"bartlett\", zoi_radius distance filter reaches zero, linear decay central pixel. type = \"rectangle\", zoi_radius corresponds half size side square filter. type = \"mfilter\", zoi_radius numeric value matrix , defined user. See description details. type [character(1)=\"circle\"]{\"circle\", \"Gauss\", \"rectangle\", \"exp_decay\", \"bartlett\", \"threshold\", \"step\", \"mfilter\"}  Type filter used calculate cumulative ZoI density. See details. [character(1)=\"R\"]{\"R\", \"GRASS\"}  computation done? Default \"R\". = \"GRASS\", R session must linked open GRASS GIS session specific location mapset. module [character(1)=\"r.mfilter\"]{\"r.mfilter\", \"r.resamp.filter\", \"r.neighbors\"}  = \"GRASS\", algorithm used compute cumulative ZoI? See details description. output_type [character(1)=\"cumulative_zoi\"]{\"cumulative_zoi\", \"density\"}  output_type = \"cumulative_zoi\" (default), ZoI weight matrix normalized, .e. maximum value weight matrix central pixel value always 1. means values input map summed (considering decay distance within neighborhood) output map presents values higher 1. output_type = \"density\", weight matrix normalized filtering process, leading values outmap map generally lower 1. zoi_limit [numeric(1)=0.05]  non-vanishing functions (e.g. exp_decay, gaussian_decay), value used set relationship ZoI radius decay functions: zoi_radius defined minimum distance ZoI assumes values zoi_limit. default 0.05. parameter used zoi_radius NULL. min_intensity [numeric(1)=0.01]  Minimum intensity exponential Gaussian decay functions define radius window define filter. See create_filter details. max_dist [numeric(1)=50000]  Maximum size (meters) define radius window defines filter. applicable exponential Gaussian decay functions. See create_filter details. zeroAsNA [logical(1)=FALSE]  TRUE treats cells NA zero. extent_x_cut, entent_y_cut [numeric vector(2)=c(0,1)]  Vector representing minimum maximum extent x y final output, format c(min,max). intended keep region interest consider surroundings calculating cumulative ZoI density. might especially useful example use r.mfilter algorithm GRASS, edges region excluded computation. default keep extent input raster. na.policy [character(1)=\"omit\"] \\cr Can used determine cells xfor focal values computed. Must one \"\" (compute cells), \"\" (cells NA) \"omit\" (skip cells NA). Note value argument affect cells around focal cell included computations (use na.rm=TRUE ignore cells NA ). See [terra::focal] details. used whenwhere = \"R\"`. na.rm [logical(1)=FALSE]  missing values removed filtering calculations? Option neighborhood analysis performed terra::focal function. used = \"R\". plotit [logical(1)=FALSE]  outputs plotted along calculation? used = \"R\". output_map_name [character(1)=NULL]  Name output map. used = \"GRASS\". NULL (default), standard name created based name input map x, ZoI shape type, ZoI radius zoi_radius. input_as_region [logical(1)=TRUE]  input map x used redefine working GRASS region cumulative ZoI calculation? TRUE, x used define region g.region. FALSE, region previously defined GRASS GIS session used computation. remove_intermediate [logical(1)=TRUE]  intermediate maps created computing output map excluded end process? used = \"GRASS\". overwrite [logical(1)=FALSE]  map already exists name output_map_name working GRASS GIS location mapset, overwritten? used = \"GRASS\". quiet [logical(1)=TRUE]  GRASS GIS messages ommited prompt along computation? used = \"GRASS\". ... arguments used within create_filter terra::focal.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"RasterLayer SpatRaster (according input x map) cumulative zone influence density features. cumulative ZoI uses ZoI/weight matrix rescaled 1 central pixel (creating values output map might go well beyond 1), density features uses normalized ZoI/weight matrix (values summing 1), created values smaller one output map. multiple zoi_radius values given, RasterBrick multi-layer SpatRaster, cumulative ZoI density maps ZoI radius. computation done GRASS GIS, output name output raster map within GRASS GIS location mapset current session. user can retrieve maps R using rgrass7::read_RAST export outside GRASS using r..gdal module, instance.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"input raster supposed represent location point, line, polygon infrastructure (e.g. houses, roads, mining areas), landscape variable whose representation might one fit (e.g. areas forest habitat type land cover). recommend input raster metric projection, distances zones influence based distance infrastructure measured meters.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":"zone-of-influence-functions-and-weight-matrices","dir":"Reference","previous_headings":"","what":"Zone of Influence functions and weight matrices","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"neighborhood analysis define cumulative ZoI can computed different functions/filters. options currently implemented : circular/threshold matrix: circular filter (type = \"circle\" type = \"threshold\" type = \"step\") matrix constant weights parameter zoi_radius corresponds radius circle centered central pixel. similar circular buffer matrix. Gaussian matrix: Gaussian filter (type = \"Gauss\" type = \"gauss\" type = \"gaussian_decay\") matrix weights following Gaussian Normal decay. Gaussian curve 1 central cell parameterized zoi_radius zoi_limit, controls fast curve decreases distance. See zoi_functions details. Exponential decay matrix: exponential decay filter (type = \"exp_decay\") matrix weights following exponential decay curve, value 1 central cell parameterized zoi_radius zoi_limit. See zoi_functions details. Rectangular matrix: rectangular filter (type = \"rectangle\" type = \"box\") weight matrix whose shape square dimensions \\(n\\) x \\(n\\), \\(n = 2 * zoi_radius\\). Bartlett linear decay matrix: Bartlett, linear, tent decay filter (type = \"bartlett\" type = \"linear_decay\" type = \"tent_decay\") weight matrix whose value 1 central cell whose weights decrease linearly zero distance equals zoi_radius. See zoi_functions details. user-customized filter: type = \"mfilter\", zoi_radius numeric user-defined matrix weights. Examples ones created create_filter, terra::focalMat, smoothie::kernel2dmeitsjer, matrices created hand. Weight matrices might differ expected decay function depending intended resolution - finer resolution, detailed correspondent original functions matrix .","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":"algorithms-in-grass-gis","dir":"Reference","previous_headings":"","what":"Algorithms in GRASS GIS","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"GRASS GIS, different modules might used computation, r.resamp.filter, r.mfilter, r.neighbors. module used controlled parameter module. algorithms provide different capabilities flexibility. r.resamp.filter seems fastest one cases, less flexibility choice zone influence function. algorithm calculates weighted density features, might rescaled cumulative ZoI appropriate scaling factor (calculated weight matrix) provided. Currently filters type = \"bartlett\" type = \"box\" implemented. information algorithm . r.mfilter slower r.resamp.filter much faster r.neighbors, allow flexible choice shape zone influence (wight matrix shape). r.mfilter indicated terms balance flexibility choice ZoI shape computation efficiency. inconvenient r.mfilter creates edge effect information outer cells raster (number cells correspond zoi_radius half size weight matrix), used users add buffer area \\(ge zoi_radius\\) around input raster map, avoid edge effects. See https://github.com/OSGeo/grass/issues/2184 details. r.neighbors considerably slower algorithms (10 100 times), allow flexible choice ZoI shape. Contrary r.resamp.filter r.mfilter, can perform sum pixel values weighted input filter ZoI, r.neighbors might calculate many statistical summaries within window analysis, mean, median, standard deviation etc.","code":""},{"path":[]},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_cumulative.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the cumulative zone of influence of multiple features — calc_zoi_cumulative","text":"","code":"# Running calc_zoi_cumulative through R library(mobsim) #> Error in library(mobsim): there is no package called ‘mobsim’ library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:raster’: #>  #>     intersect, select, union #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(terra) #> terra 1.6.7  set.seed(1234)  # set points ext <- 30000 wd <- ext/20 pts <- set_points(n_features = 1000, centers = 1,                   width = wd, res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext),                   buffer_around = 10000)#, use_terra = F) #> Error in loadNamespace(x): there is no package called ‘mobsim’ plot(pts$pts) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found plot(pts$rast) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found  # calculate cumulative zone of influence for multiple influence radii, # using a Gaussian filter zoi_values <- c(250, 500, 1000, 2500, 5000) cumzoi_gauss <- calc_zoi_cumulative(pts$rast, type = \"Gauss\", zoi_radius = zoi_values,                                     extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in class(x) %in% c(\"SpatRaster\"): object 'pts' not found plot(cumzoi_gauss) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cumzoi_gauss' not found  # calculate cumulative zone of influence for multiple influence radii, # using a circle neighborhood cumzoi_circle <- calc_zoi_cumulative(pts$rast, type = \"circle\", zoi_radius = zoi_values,                                      extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in class(x) %in% c(\"SpatRaster\"): object 'pts' not found plot(cumzoi_circle) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cumzoi_circle' not found  # calculate cumulative zone of influence for multiple influence radii, # using an exponential decay neighborhood cumzoi_exp <- calc_zoi_cumulative(pts$rast, type = \"exp_decay\", zoi_radius = zoi_values,                                   extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in class(x) %in% c(\"SpatRaster\"): object 'pts' not found plot(cumzoi_exp) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cumzoi_exp' not found  # comparing plot(c(cumzoi_gauss[[3]], cumzoi_circle[[3]], cumzoi_exp[[3]]),      main = c(\"Gaussian 1000m\",               \"Circle 1000m\",               \"Exponential decay 1000m\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cumzoi_gauss' not found  # calculate cumulative influence for a single zone of influence # using a user-defined filter my_filter <- create_filter(pts$rast, zoi_radius = 1000, type = \"rectangle\") #> Error in class(r) %in% c(\"RasterLayer\", \"RasterBrick\", \"RasterStack\",     \"SpatRaster\"): object 'pts' not found cumzoi_user <- calc_zoi_cumulative(pts$rast, type = \"mfilter\", zoi_radius = my_filter,                                    extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in class(x) %in% c(\"SpatRaster\"): object 'pts' not found plot(cumzoi_user,      main = \"User-defined rectangular filter\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cumzoi_user' not found  # calculate density with 1000m radius using an exp_decay neighborhood density_exp <- calc_zoi_cumulative(pts$rast, type = \"exp_decay\", zoi_radius = 1000,                                    output_type = \"density\",                                    extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in class(x) %in% c(\"SpatRaster\"): object 'pts' not found # compare # note the difference in the color scales plot(c(cumzoi_exp[[3]], density_exp),      main = c(\"Cumulative ZoI 1000m\", \"Density 1000m\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cumzoi_exp' not found  #-------------------- # Running calc_zoi_cumulative through GRASS GIS library(rgrass7) #> Loading required package: XML #> GRASS GIS interface loaded with GRASS version: (GRASS not running) library(terra) library(dplyr)  # Load raster data f <- system.file(\"raster/cabins.tif\", package = \"oneimpact\") cabins <- terra::rast(f)  # connect to grass gis 7.8 and create grass location grassdir <- system(\"grass78 --config path\", intern = T) #> Error in system(\"grass78 --config path\", intern = T): error in running command gisDB <- \".\" # create location and mapset in the working directory loc <- \"ETRS_33N/\" # name of the location ms <- \"PERMANENT\" # name of the mapset rgrass7::initGRASS(gisBase = grassdir,                    SG = cabins, # use map to define location projection                    home = tempdir(),                    override = T,                    gisDbase = gisDB,                    location = loc,                    mapset = ms) #> Error in file.exists(gisBase): object 'grassdir' not found  # define map name within GRASS GIS cabins_g <- \"cabins_example\" # add file to GRASS GIS mapset rgrass7::write_RAST(cabins, cabins_g, flags = c(\"o\", \"overwrite\")) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.in.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.in.gdal: not found  # check terra::plot(cabins, col = \"black\",             main = \"Map of tourist cabins\")   #--- # define region in GRASS GIS rgrass7::execGRASS(\"g.region\", raster = cabins_g,                    flags = \"p\") #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found  # Input map name within GRASS GIS - binary map cabins_bin_g <- grass_binarize(cabins_g, breaks = 1, output = \"cabins_example_bin\",                                     null = 0, overwrite = TRUE) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found  # check input cabins_bin <- rgrass7::read_RAST(\"cabins_example_bin\", return_format = \"terra\", NODATA = 255) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.out.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.out.gdal: not found  plot(cabins_bin, col = c(\"lightyellow\", \"black\"),      main = \"Binarized map of cabins\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cabins_bin' not found  # Exponential decay exp_name <- calc_zoi_cumulative(x = cabins_bin_g,                                 zoi_radius = 1000, zoi_limit = 0.01,                                 type = \"exp_decay\",                                 where = \"GRASS\",                                 overwrite = T, quiet = F) #> Error in calc_zoi_cumulative_grass(x = x, zoi_radius = zoi_radius, type = type,     output_type = output_type, module = module, zoi_limit = zoi_limit,     min_intensity = min_intensity, max_dist = max_dist, extent_x_cut = extent_x_cut,     extent_y_cut = extent_y_cut, parallel = parallel, output_map_name = output_map_name,     input_as_region = input_as_region, remove_intermediate = remove_intermediate,     overwrite = overwrite, quiet = quiet, ...): object 'cabins_bin_g' not found # Bartlett decay barlett_name <- calc_zoi_cumulative(x = cabins_bin_g, zoi_radius = 1000,                                     type = \"bartlett\",                                     where = \"GRASS\",                                     overwrite = T, quiet = F) #> Error in calc_zoi_cumulative_grass(x = x, zoi_radius = zoi_radius, type = type,     output_type = output_type, module = module, zoi_limit = zoi_limit,     min_intensity = min_intensity, max_dist = max_dist, extent_x_cut = extent_x_cut,     extent_y_cut = extent_y_cut, parallel = parallel, output_map_name = output_map_name,     input_as_region = input_as_region, remove_intermediate = remove_intermediate,     overwrite = overwrite, quiet = quiet, ...): object 'cabins_bin_g' not found # Gaussian decay gauss_name <- calc_zoi_cumulative(x = cabins_bin_g,                                   zoi_radius = 1000, zoi_limit = 0.01,                                   type = \"Gauss\",                                   where = \"GRASS\",                                   overwrite = T, quiet = F) #> Error in calc_zoi_cumulative_grass(x = x, zoi_radius = zoi_radius, type = type,     output_type = output_type, module = module, zoi_limit = zoi_limit,     min_intensity = min_intensity, max_dist = max_dist, extent_x_cut = extent_x_cut,     extent_y_cut = extent_y_cut, parallel = parallel, output_map_name = output_map_name,     input_as_region = input_as_region, remove_intermediate = remove_intermediate,     overwrite = overwrite, quiet = quiet, ...): object 'cabins_bin_g' not found  # Threshold decay (circle, step) threshold_name <- calc_zoi_cumulative(x = cabins_bin_g, zoi_radius = 1000,                                       type = \"threshold\",                                       where = \"GRASS\",                                       overwrite = T, quiet = F) #> Error in calc_zoi_cumulative_grass(x = x, zoi_radius = zoi_radius, type = type,     output_type = output_type, module = module, zoi_limit = zoi_limit,     min_intensity = min_intensity, max_dist = max_dist, extent_x_cut = extent_x_cut,     extent_y_cut = extent_y_cut, parallel = parallel, output_map_name = output_map_name,     input_as_region = input_as_region, remove_intermediate = remove_intermediate,     overwrite = overwrite, quiet = quiet, ...): object 'cabins_bin_g' not found  (all_names <- c(exp_name, barlett_name, gauss_name, threshold_name)) #> Error in eval(expr, envir, enclos): object 'exp_name' not found  # visualize cabins_zoi_cumulative <- rgrass7::read_RAST(all_names, return_format = \"terra\") #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.out.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.out.gdal: not found  title_plot <- c(\"Exponential decay 1000m\", \"Bartlett decay 1000m\",                 \"Gaussian decay 1000m\", \"Threshold decay 1000m\") terra::plot(cabins_zoi_cumulative, main = title_plot) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cabins_zoi_cumulative' not found  #--- # calculate density vs cumulative ZoI exp_name_d <- calc_zoi_cumulative(x = cabins_bin_g,                                   zoi_radius = 1000, zoi_limit = 0.01,                                   type = \"exp_decay\", output_type = \"density\",                                   where = \"GRASS\",                                   overwrite = T, quiet = F) #> Error in calc_zoi_cumulative_grass(x = x, zoi_radius = zoi_radius, type = type,     output_type = output_type, module = module, zoi_limit = zoi_limit,     min_intensity = min_intensity, max_dist = max_dist, extent_x_cut = extent_x_cut,     extent_y_cut = extent_y_cut, parallel = parallel, output_map_name = output_map_name,     input_as_region = input_as_region, remove_intermediate = remove_intermediate,     overwrite = overwrite, quiet = quiet, ...): object 'cabins_bin_g' not found  cabins_density <- rgrass7::read_RAST(exp_name_d, return_format = \"terra\") #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.out.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.out.gdal: not found  terra::plot(c(cabins_zoi_cumulative[[1]], cabins_density),             main = c(\"Cumulative ZoI\", \"Density\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cabins_zoi_cumulative' not found  #--- # Using 'r.resamp.filter' algorithm  # rectangle rectangle_resamp_filt <- calc_zoi_cumulative(x = cabins_bin_g,                                              zoi_radius = 1000,                                              type = \"box\",                                              output_type = \"density\",                                              where = \"GRASS\",                                              module = \"r.resamp.filter\",                                              overwrite = T, quiet = F) #> Error in calc_zoi_cumulative_grass(x = x, zoi_radius = zoi_radius, type = type,     output_type = output_type, module = module, zoi_limit = zoi_limit,     min_intensity = min_intensity, max_dist = max_dist, extent_x_cut = extent_x_cut,     extent_y_cut = extent_y_cut, parallel = parallel, output_map_name = output_map_name,     input_as_region = input_as_region, remove_intermediate = remove_intermediate,     overwrite = overwrite, quiet = quiet, ...): object 'cabins_bin_g' not found rgrass7::read_RAST(rectangle_resamp_filt, return_format = \"terra\") %>%   plot(main = \"Rectangle ZoI 1000m\") #> Warning: error in running command #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': The command #>    r.out.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.out.gdal: not found  # bartlett bartlett_resamp_filt <- calc_zoi_cumulative(x = cabins_bin_g,                                             zoi_radius = 1000,                                             type = \"bartlett\",                                             output_type = \"cumulative_zoi\",                                             where = \"GRASS\",                                             module = \"r.resamp.filter\",                                             overwrite = T, quiet = F) #> Error in calc_zoi_cumulative_grass(x = x, zoi_radius = zoi_radius, type = type,     output_type = output_type, module = module, zoi_limit = zoi_limit,     min_intensity = min_intensity, max_dist = max_dist, extent_x_cut = extent_x_cut,     extent_y_cut = extent_y_cut, parallel = parallel, output_map_name = output_map_name,     input_as_region = input_as_region, remove_intermediate = remove_intermediate,     overwrite = overwrite, quiet = quiet, ...): object 'cabins_bin_g' not found rgrass7::read_RAST(bartlett_resamp_filt, return_format = \"terra\") %>%   plot(main = \"Bartlett ZoI 1000m\") #> Warning: error in running command #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': The command #>    r.out.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.out.gdal: not found  # Gaussian - to be implemented! if(FALSE) {   gauss_resamp_filt <- calc_zoi_cumulative(x = cabins_bin_g,                                            zoi_radius = \"1000,3000\",                                            type = \"gauss,box\",                                            output_type = \"cumulative_zoi\",                                            where = \"GRASS\",                                            module = \"r.resamp.filter\",                                            overwrite = T, quiet = F)   rgrass7::read_RAST(bartlett_resamp_filt, return_format = \"terra\") %>%     plot() }  # remove rasters created to_remove_rast <- unique(c(all_names, exp_name_d,                            rectangle_resamp_filt, bartlett_resamp_filt)) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'unique': object 'all_names' not found # rgrass7::execGRASS(\"g.remove\", type = \"vect\", name = to_remove_vect, flags = \"f\") # rgrass7::execGRASS(\"g.remove\", type = \"rast\", name = to_remove_rast, flags = \"f\")"},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_nearest.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the zone of influence from the nearest feature — calc_zoi_nearest","title":"Calculate the zone of influence from the nearest feature — calc_zoi_nearest","text":"function takes raster locations counts infrastructure calculates raster (set rasters, case one value zoi_radius) representing zone influence (ZoI) neareast feature type infrastructure. Zones influence defined functions decay Euclidean distance infrastructure rate decay controlled ZoI radius (zoi_radius), defines far influence infrastructure feature goes. default, Gaussian decay ZoI calculated, decay functions might used (see zoi_funtions examples). function might also return Euclidean distance nearest feature transformation (e.g. log- sqrt-distance nearest feature). procedure might computed R GRASS GIS. GRASS, requires active connection R session GRASS GIS location mapset (package rgrass7), input maps already loaded within GRASS GIS mapset. calculations done R, input (set ) raster map(s) function returns another (set ) raster map(s). calculations done within GRASS GIS, input name raster map already loaded GRASS GIS location mapset, function returns name output map. map stored GRASS GIS location/mapset, might retrieved R rgrass7::read_RAST function exported outside GRASS using r..gdal module, instance.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_nearest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the zone of influence from the nearest feature — calc_zoi_nearest","text":"","code":"calc_zoi_nearest(   x,   zoi_radius = NULL,   type = c(\"Gauss\", \"exp_decay\", \"bartlett\", \"half_norm\", \"threshold\", \"step\",     \"euclidean\", \"log\", \"sqrt\")[1],   where = c(\"R\", \"GRASS\")[1],   log_base = exp(1),   zoi_limit = 0.05,   zoi_hl_ratio = NULL,   half_life = NULL,   exp_decay_parms = c(1, 0.01),   hnorm_decay_parms = c(1, 20),   intercept = 1,   constant_influence = 1,   dist_offset = 0,   zeroAsNA = FALSE,   extent_x_cut = NULL,   extent_y_cut = NULL,   plotit = FALSE,   output_map_name = NULL,   metric = c(\"euclidean\", \"geodesic\", \"squared\", \"maximum\", \"manhattan\")[1],   input_as_region = FALSE,   remove_intermediate = TRUE,   print_expression = FALSE,   quiet = TRUE,   overwrite = FALSE,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_nearest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the zone of influence from the nearest feature — calc_zoi_nearest","text":"x [RasterLayer,SpatRaster]  Raster representing locations features, preferentially value 1 (positive value) features located NA elsewhere. Alternatively, x might binary (dummy) spatial variable representing presence linear area features, NA/-data background. x can RasterLayer raster package SpatRaster terra package. = \"GRASS\", x must string corresponding name input map within GRASS GIS location mapset. Maps without NA background might prepared input calc_zoi_nearest raster algebra R e.g. use module r.null GRASS GIS. zoi_radius [numeric(1)]  Zone Influence (ZoI) radius, distance ZoI vanishes goes given minimum limit value zoi_limit. See zoi_functions details. parameter ignored type = \"euclidean\", type = \"log\", type = \"sqrt\". type [character(1)=\"Gauss\"]{\"Gauss\", \"exp_decay\", \"bartlett\", \"threshold\", \"step\", \"euclidean\", \"log\",\"sqrt\"} Gauss half_norm, ZoI follows half-normal shape: N_0 * exp(-lambda * (euclidean_distance^2)). N_0 lambda parameters defined -- see zoi_functions details. exp_decay, ZoI follows exponential decay shape: N_0 * exp(-lambda * euclidean_distance). N_0 lambda parameters defined -- see zoi_functions details. bartlett, linear_decay, tent_decay, ZoI follows linear decay shape within ZoI radius (zoi_radius). threshold step, constant influence consider within zone influence radius (zoi_radius). pixels closer zoi_radius infrastructure considered \"influence\" nearest feature, constant influence value defined constant_influence parameter, pixels assumed zero influence. euclidean, function returns Euclidean distance proxy ZoI, even though proper zone influence defined case. log, function returns log-distance: log(euclidean_distance, base = log_base) proxy ZoI, even though proper zone influence defined case. sqrt, functions returns square rooted distance: sqrt(euclidean_distance) proxy ZoI, even though proper zone influence defined case. See details . options still implemented (functions generic user-defined ZoI function input). [character(1)=\"R\"]{\"R\", \"GRASS\"}  computation done? Default \"R\". = \"GRASS\", R session must linked open GRASS GIS session specific location mapset. log_base [numeric(1)=exp(1)]  Base logarithm, type = log. zoi_limit [numeric(1)=0.05]  non-vanishing functions (e.g. exp_decay, gaussian_decay), value used set relationship ZoI radius decay functions: zoi_radius defined minimum distance ZoI assumes values zoi_limit. default 0.05. parameter used zoi_radius NULL. exp_decay_parms [numeric(2)=c(1,0.01)]  Parameters (N_0, lambda) exponential decay ZoI, type = exp_decay. value lambda defined used zoi_radius = NULL half_life = NULL, otherwise one parameters used determine lambda. default, N_0 defined 1, means ZoI 1 infrastructure feature located, decreases Euclidean distance increases. hnorm_decay_parms [numeric(2)=c(1,20)]  Parameters (N_0, sigma) half-normal decay ZoI, type = Gauss type = half_normal. value sigma defined used define decay rate lambda zoi_radius = NULL half_life = NULL, otherwise one parameters used determine lambda. default, N_0 defined 1, means ZoI 1 infrastructure feature located, decreases Euclidean distance increases. constant_influence [numeric(1)=1]  Constant value ZoI nearest feature type = \"threshold\" type = \"step\". Default 1. case, pixels closer infrastructure zoi_radius classified constant value. dist_offset [numeric(1)=1]  Number add Euclidean distance transforming , avoid -Inf/Inf values (e.g. case log transformation). small value compared range values Euclidean distance, influence analyses. zeroAsNA [logical(1)=FALSE]  TRUE treats cells zero NA. extent_x_cut, entent_y_cut [numeric vector(2)=c(0,1)]  Vector representing minimum maximum extent x y final output, format c(min,max). intended keep region interest, standardizing parameters region comparing resulting ZoI maps cumulative ZoI, calculated calc_zoi_cumulative. plotit [logical(1)=FALSE]  outputs plotted along calculation? used = \"R\". output_map_name [character(1)=NULL]  Name output map name, used within GRASS (= \"GRASS\"). default, NULL output map names concatenation input map name (e.g. \"map_houses\") decay function zoi_radius used (e.g. type = \"exp_decay\" zoi_radius = 1000, name \"map_houses_exp_decay_1000\"). parameter ignored calculations performed R (= \"R\"). metric [character(1)=\"euclidean\"]{\"euclidean\", \"geodesic\", \"squared\", \"maximum\", \"manhattan\"}  calculations perfomed within GRASS GIS, metric argument calculate distance infrastructure features module r.grow.distance. information GRASS GIS documentation function. parameter ignored calculations performed R (= \"R\"). input_as_region [logical(1)=FALSE]  input map x used redefine working GRASS region cumulative ZoI calculation? TRUE, x used define region g.region. FALSE, region previously defined GRASS GIS session used computation. remove_intermediate [logical(1)=TRUE]  intermediate maps created computing output map excluded end process? used = \"GRASS\". print_expression [logical(1)=FALSE]  expression transforming raster distance printed prompt? used = \"GRASS\" debugging result r.mapcalc. quiet [logical(1)=TRUE]  GRASS GIS messages ommited prompt along computation? used = \"GRASS\". overwrite [logical(1)=FALSE]  map already exists name output_map_name working GRASS GIS location mapset, overwritten? used = \"GRASS\". ... Adittional parameters passed terra::distance() ZoI functions (see zoi_functions) calculations performed R. additional parameters implemented computation GRASS GIS.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_nearest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the zone of influence from the nearest feature — calc_zoi_nearest","text":"calculations performed R (= \"R\"), function returns RasterLayer (SpatRaster, according class input object) zone influence nearest feature. multiple values zoi_radius providade, stack rasters returned. calculations performed GRASS GIS (= \"GRASS\"), maps kept within GRASS GIS location/mapset function returns name calculated maps. computation done GRASS GIS, output name output raster map within GRASS GIS location mapset current session. user can retrieve maps R using rgrass7::read_RAST export outside GRASS using r..gdal module, instance.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_nearest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the zone of influence from the nearest feature — calc_zoi_nearest","text":"practice, function first calculated Euclidean distance pixel nearest feature transforms according ZoI functions. R, calc_zoi_nearest makes use terra::distance function following procedures made raster algebra. GRASS, module r.grow.distance used calculate Euclidean distance nearest feature r.mapcalc.simple transform distance different ZoI nearest feature. input raster x positive values pixels infrastructure located NA/-data places. input raster supposed represent location point, line, polygon infrastructure (e.g. houses, roads, mining areas), landscape variable whose representation might one fit (e.g. areas forest habitat type land cover). recommend input raster metric projection, distances zones influence based distance infrastructure measured meters.","code":""},{"path":[]},{"path":"https://ninanor.github.io/oneimpact/reference/calc_zoi_nearest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the zone of influence from the nearest feature — calc_zoi_nearest","text":"","code":"# Running calc_zoi_nearest through R library(mobsim) #> Error in library(mobsim): there is no package called ‘mobsim’ library(terra) library(dplyr) library(sf) #> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE  set.seed(1234)  # set points ext <- 30000 wd <- ext/20 pts <- set_points(n_features = 50, centers = 1,                   width = wd, res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext)) #> Error in loadNamespace(x): there is no package called ‘mobsim’ plot(pts$pts) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found plot(pts$rast) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found  # calculate distance to the nearest feature d <- calc_zoi_nearest(pts$rast, type = \"euclidean\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(d) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'd' not found  # calculate log_dist (the rest is equal) log_d <- calc_zoi_nearest(pts$rast, type = \"log\", log_base = 10) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(log_d) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'log_d' not found  # calculate sqrt_dist sqrt_d <- calc_zoi_nearest(pts$rast, type = \"sqrt\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(sqrt_d) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'sqrt_d' not found  # calculate exponential decay zone of influence # using exp_decay_parms parameter exp_d1 <- calc_zoi_nearest(pts$rast, type = \"exp_decay\",                            exp_decay_parms = c(1, 0.001)) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(exp_d1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'exp_d1' not found  # calculate exponential decay zone of influence using # zoi_radius and zoi_limit (default) radius2 <- 1000 # zoi = 1000m zoi_limit2 <- 0.05 # here zoi is the distance where the function reaches 0.05 exp_d2 <- calc_zoi_nearest(pts$rast, type = \"exp_decay\", zoi_radius = radius2,                            zoi_limit = zoi_limit2) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(exp_d2) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'exp_d2' not found # buffer pts_shp <- pts$pts %>%   sf::st_as_sf(coords = c(1,2)) #> Error in sf::st_as_sf(., coords = c(1, 2)): object 'pts' not found # zoi = 1000m pts_shp %>%   sf::st_buffer(dist = radius2) %>%   sf::st_union() %>%   plot(add = T, border = \"black\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts_shp' not found legend(\"bottomright\", legend = c(\"ZoI radius\"), col = c(\"black\"), lwd = 1.1) #> Error in (function (s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,     ...) {    if (!is.null(vfont))         vfont <- c(typeface = pmatch(vfont[1L], Hershey$typeface),             fontindex = pmatch(vfont[2L], Hershey$fontindex))    .External.graphics(C_strWidth, as.graphicsAnnot(s), pmatch(units,         c(\"user\", \"figure\", \"inches\")), cex, font, vfont, ...)})(dots[[1L]][[1L]], cex = dots[[2L]][[1L]], font = dots[[3L]][[1L]],     units = \"user\"): plot.new has not been called yet  # calculate exponential decay zone of influence using half life parameter # if half_life = 250 m and zoi_hl_ratio = 4, zoi is 1000 m half_life3 <- 250 # intensity gets down to 1/16 = 0.06 for 4*half_life=1000m zoi_hl_ratio3 <- 4 # default exp_d4 <- calc_zoi_nearest(pts$rast, type = \"exp_decay\", half_life = half_life3,                            zoi_hl_ratio = zoi_hl_ratio3) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(exp_d4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'exp_d4' not found # buffer pts_shp <- pts$pts %>%   sf::st_as_sf(coords = c(1,2)) #> Error in sf::st_as_sf(., coords = c(1, 2)): object 'pts' not found # half_life = 250m pts_shp %>%   sf::st_buffer(dist = half_life3) %>%   sf::st_union() %>%   plot(add = T, border = \"red\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts_shp' not found # zoi = 1000m pts_shp %>%   sf::st_buffer(dist = half_life3*zoi_hl_ratio3) %>%   sf::st_union() %>%   plot(add = T, border = \"black\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts_shp' not found legend(\"bottomright\", legend = c(\"Exponential half-life\", \"ZoI radius\"),        col = c(\"red\", \"black\"), lwd = 1.1) #> Error in (function (s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,     ...) {    if (!is.null(vfont))         vfont <- c(typeface = pmatch(vfont[1L], Hershey$typeface),             fontindex = pmatch(vfont[2L], Hershey$fontindex))    .External.graphics(C_strWidth, as.graphicsAnnot(s), pmatch(units,         c(\"user\", \"figure\", \"inches\")), cex, font, vfont, ...)})(dots[[1L]][[1L]], cex = dots[[2L]][[1L]], font = dots[[3L]][[1L]],     units = \"user\"): plot.new has not been called yet  # calculate exponential decay zone of influence using # zoi_radius parameter and zoi_hl_ratio zoi_radius4 <- 4000 # intensity gets down to 1/16 = 0.06 for zoi = 4000m, half_life = 1000m zoi_hl_ratio4 <- 6 # default exp_d4 <- calc_zoi_nearest(pts$rast, type = \"exp_decay\", zoi_radius = zoi_radius4,                            zoi_hl_ratio = zoi_hl_ratio4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(exp_d4) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'exp_d4' not found # buffer pts_shp <- pts$pts %>%   sf::st_as_sf(coords = c(1,2)) #> Error in sf::st_as_sf(., coords = c(1, 2)): object 'pts' not found # half_life = 1000m pts_shp %>%   sf::st_buffer(dist = zoi_radius4/zoi_hl_ratio4) %>%   sf::st_union() %>%   plot(add = T, border = \"red\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts_shp' not found # zoi = 4000m pts_shp %>%   sf::st_buffer(dist = zoi_radius4) %>%   sf::st_union() %>%   plot(add = T, border = \"black\", ) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts_shp' not found legend(\"bottomright\", legend = c(\"Exponential half-life\", \"ZoI radius\"),        col = c(\"red\", \"black\"), lwd = 1.1) #> Error in (function (s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,     ...) {    if (!is.null(vfont))         vfont <- c(typeface = pmatch(vfont[1L], Hershey$typeface),             fontindex = pmatch(vfont[2L], Hershey$fontindex))    .External.graphics(C_strWidth, as.graphicsAnnot(s), pmatch(units,         c(\"user\", \"figure\", \"inches\")), cex, font, vfont, ...)})(dots[[1L]][[1L]], cex = dots[[2L]][[1L]], font = dots[[3L]][[1L]],     units = \"user\"): plot.new has not been called yet  # bartlett influence, ZOI = 2000m bart_d <- calc_zoi_nearest(pts$rast, type = \"bartlett\", zoi_radius = 2000) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(bart_d) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'bart_d' not found  # buffer 2000m pts_shp %>%   sf::st_buffer(dist = 2000) %>%   sf::st_union() %>%   plot(add = T, border = \"black\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts_shp' not found legend(\"bottomright\", legend = c(\"Bartlett ZoI 2000m\"),        col = c(\"black\"), lwd = 1.1) #> Error in (function (s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,     ...) {    if (!is.null(vfont))         vfont <- c(typeface = pmatch(vfont[1L], Hershey$typeface),             fontindex = pmatch(vfont[2L], Hershey$fontindex))    .External.graphics(C_strWidth, as.graphicsAnnot(s), pmatch(units,         c(\"user\", \"figure\", \"inches\")), cex, font, vfont, ...)})(dots[[1L]][[1L]], cex = dots[[2L]][[1L]], font = dots[[3L]][[1L]],     units = \"user\"): plot.new has not been called yet  # calculate threshold influence d <- calc_zoi_nearest(pts$rast, type = \"threshold\", zoi = 2000) #> Error in calc_zoi_nearest(pts$rast, type = \"threshold\", zoi = 2000): argument 3 matches multiple formal arguments plot(d) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'd' not found  # Gaussian decay influence g_d <- calc_zoi_nearest(pts$rast, type = \"Gauss\", zoi_radius = 2000) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'ext': object 'pts' not found plot(g_d) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'g_d' not found  # buffer 2000m pts_shp %>%   sf::st_buffer(dist = 2000) %>%   sf::st_union() %>%   plot(add = T, border = \"black\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts_shp' not found legend(\"bottomright\", legend = c(\"Gaussian ZoI 2000m\"),        col = c(\"black\"), lwd = 1.1) #> Error in (function (s, units = \"user\", cex = NULL, font = NULL, vfont = NULL,     ...) {    if (!is.null(vfont))         vfont <- c(typeface = pmatch(vfont[1L], Hershey$typeface),             fontindex = pmatch(vfont[2L], Hershey$fontindex))    .External.graphics(C_strWidth, as.graphicsAnnot(s), pmatch(units,         c(\"user\", \"figure\", \"inches\")), cex, font, vfont, ...)})(dots[[1L]][[1L]], cex = dots[[2L]][[1L]], font = dots[[3L]][[1L]],     units = \"user\"): plot.new has not been called yet  #-------------------- # Running calc_zoi_nearest through GRASS GIS library(rgrass7) library(terra) library(sp) library(dplyr)  # Load raster data f <- system.file(\"raster/cabins.tif\", package = \"oneimpact\") cabins <- terra::rast(f)  # connect to grass gis 7.8 and create grass location grassdir <- system(\"grass78 --config path\", intern = T) #> Error in system(\"grass78 --config path\", intern = T): error in running command gisDB <- \".\" # create location and mapset in the working directory loc <- \"ETRS_33N/\" # name of the location ms <- \"PERMANENT\" # name of the mapset rgrass7::initGRASS(gisBase = grassdir,                    SG = cabins, # use map to define location projection                    home = tempdir(),                    override = T,                    gisDbase = gisDB,                    location = loc,                    mapset = ms) #> Error in file.exists(gisBase): object 'grassdir' not found   # define map name within GRASS GIS cabins_g <- \"cabins_example\" # add file to GRASS GIS mapset rgrass7::write_RAST(cabins, cabins_g, flags = \"overwrite\") #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.in.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.in.gdal: not found  # check terra::plot(cabins, col = \"black\",             main = \"Map of tourist cabins\")  #--- # define region in GRASS GIS rgrass7::execGRASS(\"g.region\", raster = cabins_g,                    flags = \"p\") #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found  # Input map name within GRASS GIS cabins_g #> [1] \"cabins_example\"  # Euclidean euclidean_name <- calc_zoi_nearest(cabins_g, type = \"euclidean\",                                    where = \"GRASS\",                                    quiet = T, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.grow.distance --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.grow.distance: not found # Log log_name <- calc_zoi_nearest(cabins_g, type = \"log\", log_base = 10,                              where = \"GRASS\", quiet = T, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.grow.distance --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.grow.distance: not found # Exponential decay ZoI=1000m expdecay_name <- calc_zoi_nearest(cabins_g, type = \"exp_decay\",                                   zoi_radius = 1000,                                   where = \"GRASS\", quiet = T, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.grow.distance --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.grow.distance: not found # Bartlett decay ZoI=1000m bartlett_name <- calc_zoi_nearest(cabins_g, type = \"bartlett\",                                   zoi_radius = 1000,                                   where = \"GRASS\", quiet = T, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.grow.distance --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.grow.distance: not found  # Threshold influence ZoI = 1000m threshold_name <- calc_zoi_nearest(cabins_g, type = \"threshold\",                                    zoi_radius = 1000,                                    where = \"GRASS\", quiet = T, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.grow.distance --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.grow.distance: not found  # Gaussian influence ZoI = 1000m gaussian_name <- calc_zoi_nearest(cabins_g, type = \"Gauss\",                                   zoi_radius = 1000,                                   where = \"GRASS\", quiet = T, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.grow.distance --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.grow.distance: not found   (all_names <- c(euclidean_name, log_name, expdecay_name,                 bartlett_name, threshold_name, gaussian_name)) #> Error in eval(expr, envir, enclos): object 'euclidean_name' not found  # visualize cabins_zoi_nearest <- rgrass7::read_RAST(all_names, return_format = \"terra\") #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    r.out.gdal --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: r.out.gdal: not found  title_plot <- c(\"Euclidean distance\", \"Log distance (base 10)\",                 \"Exponential ZoI 1000m\", \"Bartlett ZoI 1000m\",                 \"Threshold ZoI 1000m\", \"Gaussian ZoI 1000m\") terra::plot(cabins_zoi_nearest, main = title_plot) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cabins_zoi_nearest' not found  # remove rasters created to_remove_vect <- c(test_region_name, cabins_vect_name) #> Error in eval(expr, envir, enclos): object 'test_region_name' not found to_remove_rast <- c(all_names) #> Error in eval(expr, envir, enclos): object 'all_names' not found # rgrass7::execGRASS(\"g.remove\", type = \"vect\", name = to_remove_vect, flags = \"f\") # rgrass7::execGRASS(\"g.remove\", type = \"rast\", name = to_remove_rast, flags = \"f\")"},{"path":"https://ninanor.github.io/oneimpact/reference/create_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Create filters or kernel matrices for raster neighborhood analyses — create_filter","title":"Create filters or kernel matrices for raster neighborhood analyses — create_filter","text":"function creates matrices weights following different functions used neighborhood analyses rasters. context cumulative impact analysis, represent Zone Influence (ZoI) infrastructure point/pixel, used calculate cumulative ZoI. possible export matrices text files, use external software r.mfilter module within GRASS GIS.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/create_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create filters or kernel matrices for raster neighborhood analyses — create_filter","text":"","code":"create_filter(   r = 100,   zoi_radius = NULL,   type = c(\"exp_decay\", \"bartlett\", \"circle\", \"threshold_decay\", \"gaussian_decay\",     \"Gauss\", \"rectangle\")[1],   zoi_limit = 0.05,   half_life = NULL,   zoi_hl_ratio = NULL,   sigma = NULL,   min_intensity = 0.01,   max_dist = 5000,   normalize = FALSE,   divisor = 1,   round_vals = NULL,   save_txt = FALSE,   save_format = c(\"GRASS_rmfilter\", \"raw\")[1],   save_folder = NULL,   save_file = NULL,   parallel = TRUE )"},{"path":"https://ninanor.github.io/oneimpact/reference/create_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create filters or kernel matrices for raster neighborhood analyses — create_filter","text":"r [numeric,SpatRaster,RasterLayer]  Either numeric value corresponding resolution (pixel size) pixel filter matrix correspond ; raster object (SpatRaster terra package RasterLayer, RasterBrick, RasterStack raster package) resolution can extracted. zoi_radius [numeric(1)=NULL]  Zone Influence (ZoI) radius, map units (preferentially meters). ZoI radius distance, scale, buffer size around feature consider effect influence infrastructure variable. create_filter, interpretation zoi_radius differ depending shape zoi (parameter type): circle neighborhood (type = \"circle\" type = \"threshold\" type = \"step\"), zoi_radius corresponds radius (threshold) circle, beyond filter zero. rectangular neighborhood (type = \"rectangle\" type = \"box\"), zoi_radius corresponds half size square size, square size = 2*zoi_radius. rectangular filter different size sides, use terra::focal (please note interpretation parameters different). Bartlett neighborhood (type = \"bartlett\" type = \"linear_decay\" type = \"tent_decay\"), zoi_radius corresponds distance beyond filter zero. exponential decay neighborhood (type = \"exp_decay\") Gaussian decay neighborhood (type = \"Gauss\" type = \"gaussian_decay\"), zoi_radius corresponds distance exponential decay function goes given limit distance defined zoi_limit. See zoi_functions details. zoi_radius = NULL, exponential gaussian decay matrices defined based parameters -- see . option raise error types filters. type [character(1)=\"exp_decay\"]{\"exp_decay\", \"bartlett\", \"circle\", \"threshold_decay\", \"gaussian_decay\", \"Gauss\", \"rectangle\"}  Shape Zone Influence weight matrix. can : \"circle\", \"threshold\", \"threshold_decay\", \"step\" \"step_decay\" threshold decay ZoI; \"exp_decay\" exponential decay ZoI; \"Gauss\", \"gaussian\", \"gaussian_decay\" Gaussian decay ZoI; \"bartlett\", \"bartlett_decay\", \"linear_decay\", \"tent_decay\" linear decay ZoI; \"rectangle\" \"box\" rectangular ZoI. might correspondence weight matrix type create_filter similar functions (e.g. type = \"rectangle\" type = \"boxcar\" smoothie::kernel2dmeitsjer type = \"Gauss\" terra::focalMat parameter type = \"gauss\" n smoothie::kernel2dmeitsjer); however, interpretation parameters used define matrices different functions. zoi_limit [numeric(1)=0.05]  non-vanishing filters (e.g. exp_decay, gaussian_decay), value used set relationship ZoI radius decay functions: zoi_radius defined minimum distance x ZoI assumes values zoi_limit. default 0.05. parameter used zoi_radius NULL. half_life [numeric(1)=NULL]  Half life exponential decay function, meters. definition, half life distance exponential decay function reaches 0.5 maximum value. exp_decay function, ZoI radius parameter null (zoi_radius = NULL), value exponential half life (half_life = log(2)/lambda) can used parameterize exponential decay function. See details zoi_functions. zoi_hl_ratio [numeric(1)=6]  exp_decay function, ZoI radius zoi_radius zoi_hl_ratio given half_life NULL, value used set ZoI radius (zoi_limit ignored). zoi_hl_ratio ratio ZoI radius value half life exponential function. instance, zoi_radius = 1200 zoi_hl_ratio = 6, means half_life 200. consequence, exponential decay ZoI function decreases 0.5 distance 200, ZoI radius = 1200 defined distance ZoI decreases 0.5**6 = 0.015625. sigma [numeric(1)=NULL]  Standard deviation Gaussian function. related Gaussian decay rate \\(\\lambda\\) lambda = 1/(2*sigma^2). considered compute ZoI gaussian_decay function ZoI radius parameter null (zoi_radius = NULL). min_intensity [numeric(1)=0.01]  Minimum intensity exponential Gaussian decay functions define radius window define filter. max_dist [numeric(1)=50000]  Maximum size (meters) define radius window defines filter. applicable exponential Gaussian decay functions. normalize [logical(1)=FALSE]  Whether matrix normalized (sum cells 1 normalize = TRUE) kept (default, normalize = FALSE). divisor [numeric(1)=1]  default, 1. divisor neighborhood matrix used within r.mfilter. According module documentation, \"filter process produces new category value cell input raster map layer multiplying category values cells n x n neighborhood around center cell corresponding matrix value adding together. divisor specified, sum divided divisor.\"  divisor zero, \"divisor computed cell sum MATRIX values corresponding input cell non-null.\" words, output map rescaled interval 0,1. normalize = TRUE, divisor set n*n. round_vals [numeric(1)=NULL]  Number digits rounding weights output matrix. NULL (default), weights rounded. save_txt [logical(1)=FALSE]  ZoI matrix saved external text file? FALSE (default), output matrix just printed within R session. save_format [character(1)=\"GRASS_rmfilter\"]{\"GRASS_rmfilter\", \"raw\"}  Format function saved. Currently, either two options: GRASS GIS format module r.mfilter (save_format = \"GRASS_rmfilter\"), see details ); raw matrix (save_format = \"raw\"), values matrix printed. save_folder [character(1)=NULL]  Path folder matrix file written. NULL, current working directory used. save_file [character(1)=NULL]  Name output file, generally \".txt\" file. NULL, standard filename created, using type zoi_radius. E.g. \"filter_bartlett2000.txt\". parallel [logical(1)=TRUE]  Whether computation paralelized (details documentation r.mfilter module). separator [character(1)=\" \"]  Separator values matrix, within line. Default space.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/create_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create filters or kernel matrices for raster neighborhood analyses — create_filter","text":"matrix weight values. context cumulative impact assessment, call zone influence (ZoI) matrix used compute cumulative zone influence. save_txt = TRUE, matrix saved output text file, e.g. used external software.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/create_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create filters or kernel matrices for raster neighborhood analyses — create_filter","text":"function creates \\(n\\) x \\(n\\) ZoI weight matrices based functions different shapes parameterized ZoI radius, \\(n\\) dimension matrix. functions (e.g. threshold decay, linear decay), size matrix defined ZoI radius, meters, given intended resolution (parameter r), potentially adding new lines columns value zero keep \\(n\\) odd number. non-vanishing function (e.g. exponential Gaussian decay), even though function parameterized ZoI radius size matrix can go beyond radius. case, size matrix \\(n\\) defined either minimum intensity function value (parameter min_intensity) maximum distance matrix radius (parameter min_dist, can set zoi_radius). Keeping \\(n\\) reasonable size guarantees neighborhood analysis using input weight matrices computationally feasible. Possible future implementation: compare results smoothie::kernel2dsmooth smoothie::kernel2dmeitsjer, maybe wrap options .","code":""},{"path":[]},{"path":"https://ninanor.github.io/oneimpact/reference/create_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create filters or kernel matrices for raster neighborhood analyses — create_filter","text":"","code":"library(terra)  # load example - raster of tourist private cabins f <- system.file(\"raster/cabins.tif\", package=\"oneimpact\") r <- rast(f) # terra::ext(r)[1:2] %>% diff  # set value zero where there are no cabins r[is.na(r)] <- 0  # create exponential filter filt_exp1000 <- create_filter(r, zoi_radius = 1000,                               zoi_limit = 0.01,                               type = \"exp_decay\",                               max_dist = 5000,                               normalize = T) filt_exp3000 <- create_filter(r, zoi_radius = 3000,                               zoi_limit = 0.01,                               type = \"exp_decay\",                               max_dist = 5000,                               normalize = T) # use exponential filter neigh_r_exp1000 <- terra::focal(r, filt_exp1000, fun = \"sum\",                                 na.policy = \"omit\", na.rm = TRUE) neigh_r_exp3000 <- terra::focal(r, filt_exp3000, fun = \"sum\",                                 na.policy = \"omit\", na.rm = TRUE)  # plot plot(c(r, neigh_r_exp1000, neigh_r_exp3000),      main = c(\"original\", \"exp filter 1000m\", \"exp filter 3000m\"))   # create step filter filt_step3000 <- create_filter(r, zoi_radius = 3000, type = \"step\",                                normalize = T) # use step filter neigh_r_step3000 <- terra::focal(r, filt_step3000, fun = \"sum\",                                  na.policy = \"omit\", na.rm = TRUE)  # plot plot(c(neigh_r_exp3000, neigh_r_step3000),      main = c(\"exp filter 3000m\", \"step filter 3000m\"))  # plot(app(c(neigh_r_exp3000, neigh_r_step3000), \"diff\"))  # create bartlett (linear/tent decay) filter filt_bart3000 <- create_filter(r, zoi_radius = 3000, type = \"bartlett\",                                normalize = T) # use bartlett filter neigh_r_bart3000 <- terra::focal(r, filt_bart3000, fun = \"sum\",                                  na.policy = \"omit\", na.rm = TRUE)  # create Gaussian filter - parameterized with zoi filt_gauss3000 <- create_filter(r, zoi_radius = 3000,                                 type = \"Gauss\",                                 zoi_limit = 0.01,                                 normalize = T) # use Gaussian filter neigh_r_gauss3000 <- terra::focal(r, filt_gauss3000, fun = \"sum\",                                  na.policy = \"omit\", na.rm = TRUE)  # plot plot(c(neigh_r_exp3000, neigh_r_step3000, neigh_r_bart3000, neigh_r_gauss3000),      main = c(\"exp filter 3000m\", \"step filter 3000m\",               \"Bartlett filter 3000m\", \"Gaussian filter 3000m\"))  # plot(app(c(neigh_r_exp3000, neigh_r_bart3000), \"diff\")) # plot(app(c(neigh_r_step3000, neigh_r_bart3000), \"diff\"))  # Not run # save outside R for use in GRASS GIS if(FALSE) {   create_filter(r, zoi_radius = 1000,                 type = \"bartlett\",                 max_dist = 5000,                 normalize = T, save_txt = TRUE) }"},{"path":"https://ninanor.github.io/oneimpact/reference/grass_binarize.html","id":null,"dir":"Reference","previous_headings":"","what":"Binarize continuous raster maps — grass_binarize","title":"Binarize continuous raster maps — grass_binarize","text":"GRASS GIS, function transforms continuous categorical maps (1 category) binary maps (two values), represent, e.g., habitat-matrix maps context landscape ecology. can also used produce binary maps form maps one category (rest NULL/-data). requires active connection R session GRASS GIS location mapset (package rgrass7), input map already loaded within GRASS GIS mapset.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_binarize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binarize continuous raster maps — grass_binarize","text":"","code":"grass_binarize(   x,   breaks = 0.5,   output = paste0(x, \"_bin\"),   null = NULL,   setnull = NULL,   bin_values = c(0, 1),   quiet = TRUE,   overwrite = FALSE,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/grass_binarize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binarize continuous raster maps — grass_binarize","text":"x [character(1)]  Name input raster map, within GRASS GIS location mapset. breaks [numeric]  Breaks threshold define binary values output binary map. pixels value >= breaks considered 1 (upper value defined bin_values), rest considered 0 (lower value defined bin_values). breaks might either single numeric value vector numeric values, case multiple binary maps created (different break thresholds). output [character(1)]  Name output map, prefix output map length(breaks) > 1. latter case, names completed break value. defult use name input map, plus \"_bin\" end. null [numeric(1)=NULL]  NULL (default), NULL/-data pixels x kept output map. Otherwise, numeric value NULL pixels assume output map. uses module r.null). setnull []  NULL (default), changes made. Otherwise, set numeric values transformed NULL/NA data (using module r.null). bin_values [numeric(2)=c(0,1)]  Values c(lower, upper) output map pixels values either \"lower\" \"equal higher\" breaks. default, c(0, 1). quiet, overwrite [logical(1)]  Whether procedures GRASS GIS run quetly (flag quiet = TRUE) whether output maps overwriten (flag overwrite = TRUE).","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_binarize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binarize continuous raster maps — grass_binarize","text":"binarized map two values (set binarized maps length(breaks) > 1).","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_binarize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Binarize continuous raster maps — grass_binarize","text":"similar procedure within R, use function landscapetools::util_binarize() raster algebra functions within raster terra packages.","code":""},{"path":[]},{"path":"https://ninanor.github.io/oneimpact/reference/grass_binarize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Binarize continuous raster maps — grass_binarize","text":"","code":"# libraries library(rgrass7) library(raster) library(terra) library(dplyr)  # connect to grass gis 7.8 grassdir <- system(\"grass78 --config path\", intern = T) #> Error in system(\"grass78 --config path\", intern = T): error in running command gisDB <- \"/data/grass\" loc <- \"ETRS_33N/\" ms <- \"u_bb_cuminf\" rgrass7::initGRASS(gisBase = grassdir,                    home = tempdir(),                    override = T,                    gisDbase = gisDB,                    location = loc,                    mapset = ms) #> Error in file.exists(gisBase): object 'grassdir' not found  # input map (not binarized) rgrass7::use_sp() #> Error in rgrass7::use_sp(): sp or rgdal is not available. You need both packages installed. name_var <- \"private_cabins_sub\"  # binarize the input map  # map with only 1 cabins_bin1_name <- grass_binarize(name_var, output = \"cabins_bin1\",                                    breaks = 1, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found # map with 0, 1 cabins_bin2_name <- grass_binarize(name_var, output = \"cabins_bin2\",                                    breaks = 1, null = 0, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found  # visualize cabins_bin1_2 <- rgrass7::readRAST(c(cabins_bin2_name, cabins_bin1_name)) %>%   raster::stack() %>%   terra::rast() #> Warning: Package rgrass7 is transitioning to package rgrass for GRASS GIS 8. #> 'readRAST' is deprecated. Use 'read_RAST' instead. #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': error in evaluating the argument 'x' in selecting a method for function 'stack': object 'cabins_bin2_name' not found plot(cabins_bin1_2, main = c(\"Binarized map setting null to 0\", \"Binarized map keeping null\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cabins_bin1_2' not found  # binarize the map with multiple break values  # first create a continuous map cont_map_name <- calc_influence_nearest(name_var, zoi = 1000, transform = \"exp_decay\",                                         where = \"GRASS\", overwrite = T) #> Error in calc_influence_nearest(name_var, zoi = 1000, transform = \"exp_decay\",     where = \"GRASS\", overwrite = T): could not find function \"calc_influence_nearest\" # binarize cabins_bin2vals_name <- grass_binarize(cont_map_name, output = \"cabins_bin\",                                        breaks = c(0.3, 0.5), overwrite = T) #> Error in doGRASS(cmd, flags = flags, ..., parameters = parameters, echoCmd = echoCmd,     legacyExec = legacyExec): object 'cont_map_name' not found # visualize cabins_bin2vals <- rgrass7::readRAST(c(cont_map_name, cabins_bin2vals_name)) %>%   raster::stack() %>%   terra::rast() #> Warning: Package rgrass7 is transitioning to package rgrass for GRASS GIS 8. #> 'readRAST' is deprecated. Use 'read_RAST' instead. #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'rast': error in evaluating the argument 'x' in selecting a method for function 'stack': object 'cont_map_name' not found plot(cabins_bin2vals,      main = c(\"Original map\",               \"Binarized map, break = 0.3\",               \"Binarized map, break = 0.5\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'cabins_bin2vals' not found"},{"path":"https://ninanor.github.io/oneimpact/reference/grass_find_layer.html","id":null,"dir":"Reference","previous_headings":"","what":"Find layers within GRASS GIS with multiple patterns — grass_find_layer","title":"Find layers within GRASS GIS with multiple patterns — grass_find_layer","text":"Find layers within GRASS GIS multiple patterns","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_find_layer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find layers within GRASS GIS with multiple patterns — grass_find_layer","text":"","code":"grass_find_layer(   list_patterns,   layers_grass = NULL,   type = \"raster\",   pattern = \"*\",   mapset = \"PERMANENT\" )"},{"path":"https://ninanor.github.io/oneimpact/reference/grass_find_layer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find layers within GRASS GIS with multiple patterns — grass_find_layer","text":"list_patterns [list,character]  List strings, corresponding pattern searched names layers within GRASS GIS mapset. patterns filtered one , order listed. layers_grass [vector,character]  Vector strings names maps assessed, within GRASS GIS mapset, ones created g.list module. NULL (default), list maps within GRASS GIS mapset assessed within function. type [character(1)=\"raster\"]  Type layer listed within GRASS GIS mapset (e.g. \"raster\", \"vector\"), layers_grass NULL. pattern [character]  Regular expression used list maps within GRASS GIS mapset, layers_grass NULL. Default \"*\", maps given type listed. mapset [character(1)=\"PERMANENT\"]  Name mapset maps listed, layers_grass NULL. Default \"PERMANENT\".","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_find_layer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find layers within GRASS GIS with multiple patterns — grass_find_layer","text":"One strings names maps within GRASS GIS mapset.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_v2rast_count.html","id":null,"dir":"Reference","previous_headings":"","what":"Rasterizes a vector counting the number of features in each pixel — grass_v2rast_count","title":"Rasterizes a vector counting the number of features in each pixel — grass_v2rast_count","text":"Add within arguments grass functions options/parameters","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_v2rast_count.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rasterizes a vector counting the number of features in each pixel — grass_v2rast_count","text":"","code":"grass_v2rast_count(   x,   output = paste0(x, \"_count\"),   column = NULL,   set_region = TRUE,   align = NULL,   remove_intermediate = TRUE,   quiet = TRUE,   verbose = FALSE,   overwrite = FALSE,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/grass_v2rast_count.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rasterizes a vector counting the number of features in each pixel — grass_v2rast_count","text":"x Input vector map. output Output map name. column [chracter(1)=NULL  Default NULL. NULL, name column input vector x corresponds column summed count number features pixel output raster map. NULL, column created temporary vector, values equal 1. set_region [logical(1)=TRUE]  Default TRUE. Whether GRASS GIS computational region set within function (extent x) . FALSE, current computational region used. align [character(1)=NULL]  Name raster map align computational region produce output map.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/grass_v2rast_count.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rasterizes a vector counting the number of features in each pixel — grass_v2rast_count","text":"","code":"# libraries library(rgrass7) library(raster) library(terra) library(dplyr) library(sf)  # connect to grass gis 7.8 grassdir <- system(\"grass78 --config path\", intern = T) #> Error in system(\"grass78 --config path\", intern = T): error in running command gisDB <- \"/data/grass\" loc <- \"ETRS_33N/\" ms <- \"u_bb_cuminf\" rgrass7::initGRASS(gisBase = grassdir,                    home = tempdir(),                    override = T,                    gisDbase = gisDB,                    location = loc,                    mapset = ms) #> Error in file.exists(gisBase): object 'grassdir' not found  # input region rgrass7::use_sf() #> Error in rgrass7::use_sf(): sf or stars is not available. You need both packages installed. (s <- system.file(\"vector/study_area.gpkg\", package = \"oneimpact\")) #> [1] \"/home/runner/work/_temp/Library/oneimpact/vector/study_area.gpkg\" test_region_name <- \"region_test_oneimpact_pkg\" sf::st_read(s) %>%   rgrass7::writeVECT(vname = test_region_name, v.in.ogr_flags = \"overwrite\") #> Warning: Package rgrass7 transitioning to package rgrass for GRASS 8. #> 'writeVECT is deprecated. Use 'write_VECT' instead. #> Error in rgrass7::writeVECT(., vname = test_region_name, v.in.ogr_flags = \"overwrite\"): rgdal not available  # set region rgrass7::execGRASS(\"g.region\", vector = test_region_name, res = \"100\", flags = c(\"p\")) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found  # input vector (c <- system.file(\"vector/cabins_vect.gpkg\", package = \"oneimpact\")) #> [1] \"/home/runner/work/_temp/Library/oneimpact/vector/cabins_vect.gpkg\" cabins_vect_name <- \"private_cabins_vect\" sf::st_read(c) %>%   rgrass7::writeVECT(vname = cabins_vect_name, v.in.ogr_flags = \"overwrite\") #> Warning: Package rgrass7 transitioning to package rgrass for GRASS 8. #> 'writeVECT is deprecated. Use 'write_VECT' instead. #> Error in rgrass7::writeVECT(., vname = cabins_vect_name, v.in.ogr_flags = \"overwrite\"): rgdal not available  # rasterize with count, creating a new temp_vector cabins_count_name <- grass_v2rast_count(cabins_vect_name, output = \"cabins_count\",                                         quiet = F, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found  # rasterize with count, without creating a temporary vector cabins_count_name <- grass_v2rast_count(cabins_vect_name, output = \"cabins_count\",                                         column = \"value\", quiet = F, overwrite = T) #> Warning: error in running command #> Error in parseGRASS(cmd, legacyExec = legacyExec): The command #>    g.region --interface-description #> could not be run (127), and produced the error message: #>    sh: 1: g.region: not found  # visualize rgrass7::use_sp() #> Error in rgrass7::use_sp(): sp or rgdal is not available. You need both packages installed. rgrass7::readRAST(cabins_count_name) %>%   raster::raster() %>%   terra::rast() %>%   plot(main = \"Number of private cabins\") #> Warning: Package rgrass7 is transitioning to package rgrass for GRASS GIS 8. #> 'readRAST' is deprecated. Use 'read_RAST' instead. #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': error in evaluating the argument 'x' in selecting a method for function 'rast': error in evaluating the argument 'x' in selecting a method for function 'raster': object 'cabins_count_name' not found  # remove rasters created to_remove_vect <- c(test_region_name, cabins_vect_name) to_remove_rast <- c(cabins_count_name) #> Error in eval(expr, envir, enclos): object 'cabins_count_name' not found # rgrass7::execGRASS(\"g.remove\", type = \"vect\", name = to_remove_vect, flags = \"f\") # rgrass7::execGRASS(\"g.remove\", type = \"rast\", name = to_remove_rast, flags = \"f\")"},{"path":"https://ninanor.github.io/oneimpact/reference/isolation.html","id":null,"dir":"Reference","previous_headings":"","what":"Isolation and mean isolation in space — isolation","title":"Isolation and mean isolation in space — isolation","text":"Measures isolation mean isolation set points space. isolation creates random points landscape calculates nearest neighbor distance another set points passed input, x. mean_isolation calculates average isolation calculated isolation.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/isolation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Isolation and mean isolation in space — isolation","text":"","code":"isolation(x, n_rand = 100, ext = c(0, 1, 0, 1), lonlat = FALSE)  mean_isolation(x, n_rand = 100, ext = c(0, 1, 0, 1), lonlat = FALSE)"},{"path":"https://ninanor.github.io/oneimpact/reference/isolation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Isolation and mean isolation in space — isolation","text":"x [data.frame] data.frame (x,y) coordinates columns. n_rand [numeric(1)=100]  Number random points created space, compute distance x. ext [numeric(x)=c(0,1)] Extent space within random positions created c(x ymin, x ymax). lonlat [logical(1)=FALSE]  Whether distance points calculated WGS ellipsoid (lonlat = TRUE) plane (lonlat = FALSE). See raster::pointDistance details.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/isolation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Isolation and mean isolation in space — isolation","text":"isolation() returns distance random point nearest neighbor point x. mean_isolation() returns average nearest neighbor distance random positions points x.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/isolation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Isolation and mean isolation in space — isolation","text":"far function works square landscape. future can implement polygons rasters masks null cells necessary, approach similar set_points_sample.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/isolation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isolation and mean isolation in space — isolation","text":"","code":"pts <- set_points(n_features = 100, method = \"mobsim\", centers = 1, width = 0.1)[[1]] #> Error in loadNamespace(x): there is no package called ‘mobsim’ isolation(pts) #> Error in nrow(x): object 'pts' not found mean_isolation(pts) #> Error in nrow(x): object 'pts' not found"},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_multiscale.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation of multiple covariate effects at multiple scales — multifit_multiscale","title":"Evaluation of multiple covariate effects at multiple scales — multifit_multiscale","text":"Evaluation multiple covariate effects multiple scales","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_multiscale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation of multiple covariate effects at multiple scales — multifit_multiscale","text":"","code":"multifit_multiscale(   mod,   mod_comparison_df,   data,   formula = NULL,   weights = NULL,   args = NULL,   max_models = 10000,   corr_check = TRUE,   corr_criterion = c(\"usdm::vifcor\", \"usdm::vifstep\")[1],   corr_threshold = 0.7,   progress = FALSE,   verbose = FALSE,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation of single covariate effects at multiple scales or zones of influence (ZoI) — multifit_single","title":"Evaluation of single covariate effects at multiple scales or zones of influence (ZoI) — multifit_single","text":"Evaluation single covariate effects multiple scales zones influence (ZoI)","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation of single covariate effects at multiple scales or zones of influence (ZoI) — multifit_single","text":"","code":"multifit_single(   mod,   multief,   data,   formula = NULL,   args = NULL,   criterion = \"AIC\",   site_id = NULL,   signif = TRUE,   alpha = 0.05,   plot_est = FALSE,   print_sum = FALSE,   xlab = \"Radius [m]\",   ylab = NULL,   labels = NULL,   type = \"b\",   pch = c(1, 16) )"},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Evaluation of single covariate effects at multiple scales or zones of influence (ZoI) — multifit_single","text":"https://github.com/phuais/multifit","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation of single covariate effects at multiple scales or zones of influence (ZoI) — multifit_single","text":"mod [character(1)]  String depicting statistical function applied (e.g. \"lm\", \"glm\", \"glmer\"). multief [character]  Vector containing names columns input data, corresponding spatial attribute covariate whose scale effect zone influence assessed. names correspond covariate calculated multiple zone influence radii scales. data [data.frame] data.frame containing response variable model predictor variables, including covariate measured multiple scales ZoI radii,  whose fit assessed. formula [character,formula]  String depicting statistical formula applied models. must include least main response variable predictor variable named \"multief\" (e.g. response_variable ~ multief), corresponding covariate specified multief parameter. args [character]  Character vector additional argument/s models (e.g. args = c(\"family = poisson\") Poisson regression glm). criterion [character]  String depicting criterion used selection best model among various spatial scales (.e. one strongest relationship response variable). can one three options: ‘R2’ (R-squared, .e. coefficient determination, available model type mod), ‘AIC’ (Akaike Information Criterion), ‘BIC’ (Bayesian Information Criterion). Alternatively, user may use function calculation different criterion. case, user must specify name function first element vector, model-selection criterion (‘max’ ‘min’ value criterion, R-squared-like AIC-like criteria, respectively) second element (e.g. criterion = c(‘my_function’, ‘max’)). site_id [character] string depicting column name data.frame holding identity different sites. relevant summary landscape attributes. signif [logical(1)=TRUE]  Differentiate non-significant significant models plot different point shapes? alpha [numeric(1)=0.95]  Numeric value, 0 1. Statistical significance level (relevant signif = TRUE). ... parameters passed multifit function.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Evaluation of single covariate effects at multiple scales or zones of influence (ZoI) — multifit_single","text":"Huais, PY. 2018. multifit: R function multi-scale analysis landscape ecology. Landscape Ecology, 33: 1023. https://doi.org/10.1007/s10980-018-0657-5","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Evaluation of single covariate effects at multiple scales or zones of influence (ZoI) — multifit_single","text":"Pablo Yair Huais <phuais@gmail.com>","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single_multivar.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluation of single covariate effects at multiple scales for multiple covariates — multifit_single_multivar","title":"Evaluation of single covariate effects at multiple scales for multiple covariates — multifit_single_multivar","text":"Evaluation single covariate effects multiple scales multiple covariates","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single_multivar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluation of single covariate effects at multiple scales for multiple covariates — multifit_single_multivar","text":"","code":"multifit_single_multivar(   mod,   covariates,   data,   formula = NULL,   args = NULL,   criterion = \"AIC\",   corr_check = TRUE,   corr_criterion = c(\"usdm::vifcor\", \"usdm::vifstep\")[1],   corr_threshold = 0.7,   print_best = 5,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/multifit_single_multivar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluation of single covariate effects at multiple scales for multiple covariates — multifit_single_multivar","text":"covariates [character]  List names covariates tested, pattern within names differentiate among .","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/plot_zoi1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot nearest and cumulative zone of influence function in 1 dimension — plot_zoi1d","title":"Plot nearest and cumulative zone of influence function in 1 dimension — plot_zoi1d","text":"Plots zone influence (ZoI) functions 1 dimensional space, illustration. one value points (location infrastructure sources disturbance), either ZoI nearest feature cumulative ZoI can plotted. ZoI nearest feature corresponds maximum ZoI value infrastructure position. cumulative ZoI corresponds sum ZoI infrastructure position.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/plot_zoi1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot nearest and cumulative zone of influence function in 1 dimension — plot_zoi1d","text":"","code":"plot_zoi1d(   points,   zoi_radius,   fun = exp_decay,   cumulative = FALSE,   range_plot = c(0, 12),   step = 0.01,   na.rm = TRUE,   return_df = FALSE,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/plot_zoi1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot nearest and cumulative zone of influence function in 1 dimension — plot_zoi1d","text":"points [numeric]  Vector values x axis infrastructure located, 1 dimension (broadly, location sources disturbance spatial variables, point origin ZoI functions). zoi_radius [numeric(1)]  Zone influence (ZoI) radius, distance ZoI vanishes goes given minimum threshold value. See zoi_functions details. fun [function]  decay function represents Zone Influence (ZoI). Different functions might represent different shapes decay ZoI. See zoi_functions examples. cumulative [logical(1)=FALSE]  TRUE, cumulative ZoI plotted. FALSE (default), ZoI nearest feature plotted. range_plot [numeric(2)=c(0,12)]  vector c(xmin,xmax) x range ZoI plot. step [numeric(1)=0.01]  Size step increment used define series x positions ZoI computed, within x range defined range_plot. return_df [logical(1)=FALSE]  TRUE, data.frame x values corresponding ZoI values returned, besides plot. ... Additional parameters passed ZoI decay function fun.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/plot_zoi1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot nearest and cumulative zone of influence function in 1 dimension — plot_zoi1d","text":"ggplot object nearest cumulative influence plot. return_df = TRUE, returns list ggplot object data.frame values x (position 1d space) y (ZoI value).","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/plot_zoi1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot nearest and cumulative zone of influence function in 1 dimension — plot_zoi1d","text":"practice, plot_zoi1d computes ZoI value feature whose locations 1 dimension defined points calculates maximum (ZoI nearest) sum (cumulative ZoI) values done series points 1 dimensional space range range_plot (steps defined step) finally plotted. add: options normalization, prob etc.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/plot_zoi1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot nearest and cumulative zone of influence function in 1 dimension — plot_zoi1d","text":"","code":"# one point, exponential decay plot_zoi1d(0, zoi_radius = 3, zoi_limit = 0.05,            fun = exp_decay, range_plot = c(0, 5), cumulative = FALSE) #> New names: #> • `` -> `...1`   # exponential decay points <- c(0, 4.5, 7, 7.5) plot_zoi1d(points, zoi = 3, fun = exp_decay, range_plot = c(0, 12), cumulative = FALSE) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4`  plot_zoi1d(points, zoi = 3, fun = exp_decay, range_plot = c(0, 12), cumulative = TRUE) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4`   # threshold plot_zoi1d(points, zoi = 3, fun = threshold_decay, range_plot = c(0, 12), cumulative = F) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4`  plot_zoi1d(points, zoi = 3, fun = \"step_decay\", range_plot = c(0, 12), cumulative = T) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4`   # linear plot_zoi1d(points, zoi = 3, fun = bartlett_decay, range_plot = c(0, 12), cumulative = F) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4`  plot_zoi1d(points, zoi = 3, fun = \"linear_decay\", range_plot = c(0, 12), cumulative = T,                  return_df = T) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> $influence_plot  #>  #> $influence_df #> # A tibble: 1,201 × 2 #>        x     y #>    <dbl> <dbl> #>  1  0    1     #>  2  0.01 0.997 #>  3  0.02 0.993 #>  4  0.03 0.99  #>  5  0.04 0.987 #>  6  0.05 0.983 #>  7  0.06 0.98  #>  8  0.07 0.977 #>  9  0.08 0.973 #> 10  0.09 0.97  #> # … with 1,191 more rows #>   # gaussian plot_zoi1d(points, zoi = 3, fun = gaussian_decay, range_plot = c(0, 12), cumulative = F) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4`  plot_zoi1d(points, zoi = 3, fun = \"half_norm_decay\", range_plot = c(0, 12), cumulative = T,                  return_df = T) #> New names: #> • `` -> `...1` #> • `` -> `...2` #> • `` -> `...3` #> • `` -> `...4` #> $influence_plot  #>  #> $influence_df #> # A tibble: 1,201 × 2 #>        x     y #>    <dbl> <dbl> #>  1  0    1.00  #>  2  0.01 1.00  #>  3  0.02 1.00  #>  4  0.03 1.00  #>  5  0.04 1.00  #>  6  0.05 1.00  #>  7  0.06 1.00  #>  8  0.07 1.00  #>  9  0.08 0.999 #> 10  0.09 0.999 #> # … with 1,191 more rows #>"},{"path":"https://ninanor.github.io/oneimpact/reference/rescale_coefficients.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale standardized coefficients back to their original range after model fitting — rescale_coefficients","title":"Rescale standardized coefficients back to their original range after model fitting — rescale_coefficients","text":"Rescale standardized coefficients back original range model fitting","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/rescale_coefficients.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale standardized coefficients back to their original range after model fitting — rescale_coefficients","text":"","code":"rescale_coefficients(model, data)"},{"path":"https://ninanor.github.io/oneimpact/reference/rescale_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Rescale raster values — rescale_raster","title":"Rescale raster values — rescale_raster","text":"Rescales raster values given range.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/rescale_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rescale raster values — rescale_raster","text":"","code":"rescale_raster(x, to = c(0, 1), from = NULL)"},{"path":"https://ninanor.github.io/oneimpact/reference/rescale_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rescale raster values — rescale_raster","text":"x [SpatRaster]  Raster object colletion rasters whose values rescaled. [numeric(2)=NULL]  Range original values (format c(min,max)) raster rescaled. NULL, minimum maximum values x used.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/rescale_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rescale raster values — rescale_raster","text":"raster object (collection rasters) values rescaled given range (e.g. interval 0,1).","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/rescale_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rescale raster values — rescale_raster","text":"","code":"f <- system.file(\"raster/cabins.tif\", package = \"oneimpact\") cabins <- terra::rast(f)  # calculate influence ni <- calc_zoi_nearest(cabins, zoi_radius = 1000, type = \"exp_decay\") ci <- calc_zoi_cumulative(cabins, zoi_radius = 1000, type = \"exp_decay\",                           zeroAsNA = TRUE) plot(c(ni, ci))   # rescale plot(rescale_raster(ci)) # rescale to [0,1]  plot(rescale_raster(c(ni, ci))) # rescale both to [0,1]  plot(rescale_raster(c(ni, ci), to = c(0, 100))) # rescale to [0,100]  plot(rescale_raster(c(ni, ci), from = c(0, 50))) # rescale to [0,1] from [0,50]"},{"path":"https://ninanor.github.io/oneimpact/reference/save_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Save kernel/filter matrix to use in r.mfilter within GRASS GIS — save_filter","title":"Save kernel/filter matrix to use in r.mfilter within GRASS GIS — save_filter","text":"function saves matrix weights (filter kernel matrix) external text file. can save either raw matrix use standards running r.mfilter within GRASS GIS (specific header details).","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/save_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save kernel/filter matrix to use in r.mfilter within GRASS GIS — save_filter","text":"","code":"save_filter(   filt,   zoi_radius,   type,   save_format = c(\"GRASS_rmfilter\", \"raw\")[1],   save_folder = NULL,   save_file = NULL,   divisor = 1,   normalize = FALSE,   parallel = TRUE,   separator = \" \" )"},{"path":"https://ninanor.github.io/oneimpact/reference/save_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save kernel/filter matrix to use in r.mfilter within GRASS GIS — save_filter","text":"filt [matrix]  Filter weight matrix, one created create_filter terra::focalMat. zoi_radius [numeric(1)]  Radius Zone Influence (ZoI) matrix, meters. type [character(1)] Function kernel filter matrix (see type parameter create_filter). save_format [character(1)=\"GRASS_rmfilter\"]{\"GRASS_rmfilter\", \"raw\"}  Format function saved. Currently, either two options: GRASS GIS format module r.mfilter (save_format = \"GRASS_rmfilter\"), see details ); raw matrix (save_format = \"raw\"), values matrix printed. save_folder [character(1)=NULL]  Path folder matrix file written. NULL, current working directory used. save_file [character(1)=NULL]  Name output file, generally \".txt\" file. NULL, standard filename created, using type zoi_radius. E.g. \"filter_bartlett2000.txt\". divisor [numeric(1)=1]  default, 1. divisor neighborhood matrix used within r.mfilter. According module documentation, \"filter process produces new category value cell input raster map layer multiplying category values cells n x n neighborhood around center cell corresponding matrix value adding together. divisor specified, sum divided divisor.\"  divisor zero, \"divisor computed cell sum MATRIX values corresponding input cell non-null.\" words, output map rescaled interval 0,1. normalize = TRUE, divisor set n*n. normalize [logical(1)=FALSE]  Whether matrix normalized (sum cells 1 normalize = TRUE) kept (default, normalize = FALSE). parallel [logical(1)=TRUE]  Whether computation paralelized (details documentation r.mfilter module). separator [character(1)=\" \"]  Separator values matrix, within line. Default space.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/save_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save kernel/filter matrix to use in r.mfilter within GRASS GIS — save_filter","text":"None. funcion saves input matrix external file.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/save_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Save kernel/filter matrix to use in r.mfilter within GRASS GIS — save_filter","text":"used r.mfilter GRASS GIS module, \"filter process produces new category value cell input raster map layer multiplying category values cells n x n neighborhood around center cell corresponding matrix value adding together. divisor specified, sum divided divisor.\" See details .","code":""},{"path":[]},{"path":"https://ninanor.github.io/oneimpact/reference/save_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save kernel/filter matrix to use in r.mfilter within GRASS GIS — save_filter","text":"","code":"my_filter <- create_filter(r = 100, type = \"bartlett\", zoi_radius = 1000, round = 4) save_filter(my_filter, zoi_radius = 1000, type = \"bartlett\", save_format = \"GRASS_rmfilter\")"},{"path":"https://ninanor.github.io/oneimpact/reference/set_points.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate points in a landscape — set_points","title":"Simulate points in a landscape — set_points","text":"function simulates point patterns space rasterize . idea mimic spatial distribution point-type infrastructure, houses, cabins, turbines, instance. function returns list position points binary raster 1 points NA elsewhere. created raster define weights, base raster also returned output.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate points in a landscape — set_points","text":"","code":"set_points(   n_features = 1000,   method = c(\"mobsim\", \"regular\", \"random\", \"raster\", \"NLMR\")[1],   centers = 1,   width = 0.05,   base_raster = NULL,   nlmr_function = \"nlm_mpd\",   point_coordinates = NULL,   res = 0.1,   extent_x = c(0, 1),   extent_y = c(0, 1),   buffer_around = 0,   return_base_raster = TRUE,   use_terra = TRUE,   crs = \"\",   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/set_points.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate points in a landscape — set_points","text":"n_features [integer(1)=1000]  Total number features spread space. method [character(1)]{\"mobsim\", \"regular\", \"random\", \"raster\", \"NLMR\"}  Method used simulate points space. mobsim uses function mobsim::sim_thomas_community() mobsim package simulate points. raster uses base raster map input define weights simulate random points. NLMR creates neutral landscape model using NLMR package uses input base raster. See Details information. centers [integer(1)=1]  Number centers around features placed. Used method = \"mobsim\". width [numeric(1)=0.05]  Mean distance features cluster center cluster. Used method = \"mobsim\". base_raster [RasterLayer=NULL]  Base raster define weights creating random points. Used method = \"raster\". nlmr_function [character(1)=\"nlm_mpd\"]  Name function NLMR package used create base raster, used define weights creating random points. Used method = \"NLMR\". point_coordinates [data.frame=NULL] data.frame (x,y) columns coordinates already taken elsewhere. option intended points' coordinates already generated taken real landscape. case, points simulated just rasterized (distances derived variables might calculated). res [numeric(1)=0.1]  Resolution output raster. extent_x, entent_y [numeric vector(2)=c(0,1)]  Vector representing minimum maximum extent x y within points placed, format c(min,max). buffer_around [numeric(1)=0.1]  Size buffer around extent landscape, avoid edge effects calculating densities using neighborhood analysis. return_base_raster [logical(1)=TRUE]  Whether base_raster returned output list. NULL method = \"mobsim\". ... arguments passed input NLMR functions, defined nlmr_function argument.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate points in a landscape — set_points","text":"list three elements: (1) pts, coordinates (x,y) simulated points; (2) rast, binary raster containing landscape, 1 points NA elsewhere; (3) base_rast, base raster used weigh simulation points. method = \"mobsim\", base_rast NULL.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate points in a landscape — set_points","text":"method = \"mobsim\", function builds upon function mobsim::sim_thomas_community() mobsim package. Originally function intended simulate positions multiple species context species abundance distribution studies, fits well case single species (point patterns single type feature). case, points simulated based number centers/patches points width. method = \"raster\", function uses input raster (defined argument base_raster) define probabilities setting given point certain pixel space. method = \"NLMR\", function also uses raster define probabilities setting given point certain pixel space, raster created function NLMR package. function name defined argument nlmr_function arguments must defined additional parameters set_points(). IMPROVE: implement rasterization terra package","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate points in a landscape — set_points","text":"","code":"#----- # using mobsim library(terra) library(mobsim) #> Error in library(mobsim): there is no package called ‘mobsim’ library(dplyr)  set.seed(1234)  # gradient distribution ext <- 30000 wd <- ext/5 pts <- set_points(n_features = 1000, centers = 1,                   width = wd, res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext)) #> Error in loadNamespace(x): there is no package called ‘mobsim’ plot(pts$pts) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found plot(pts$rast, col = \"black\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found  # one focus of features, with buffer around wd <- ext/20 pts <- set_points(n_features = 1000, centers = 1,                   width = wd, res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext),                   buffer_around = 10000) #> Error in loadNamespace(x): there is no package called ‘mobsim’ plot(pts$pts) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found plot(pts$rast, col = \"black\") #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'pts' not found  #----- # using base raster  # raster set.seed(12) r <- raster::raster(matrix(runif(12),3,4)) %>%    raster::disaggregate(fact = 10)  # points from raster pts <- set_points(n_features = 100, method = \"raster\",                   base_raster = r) plot(pts$base_rast)  plot(pts$pts)  plot(pts$rast, col = \"black\")   #----- # using NLMR library(NLMR) #> Error in library(NLMR): there is no package called ‘NLMR’  # example NLM set.seed(123) ext <- 300 nlm1 <- NLMR::nlm_mpd(ext, ext, 100, roughness = .5) #> Error in loadNamespace(x): there is no package called ‘NLMR’ nlm1[] <- scales::rescale(exp(nlm1[])) #> Error in scales::rescale(exp(nlm1[])): object 'nlm1' not found  plot(nlm1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'nlm1' not found  # points pts <- set_points(n_features = 1000, method = \"raster\",                   base_raster = nlm1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'res': object 'nlm1' not found  plot(pts$base_rast)  plot(pts$pts)  plot(pts$rast, col = \"black\")   # OR we can do it directly  # points ext <- 30000 pts <- set_points(n_features = 10000, method = \"NLMR\",                   nlmr_function = \"nlm_mpd\",                   roughness = .2,                   res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext)) #> Error in get(nlmr_function): object 'nlm_mpd' not found  plot(pts$base_rast)  plot(pts$pts)  plot(pts$rast, col = \"black\")   #----- # using random or regular  set.seed(123) ext <- 30000 pts <- set_points(n_features = 1000, method = \"random\",                   res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext)) plot(pts$pts)  plot(pts$rast, col = \"black\")   pts <- set_points(n_features = 1000, method = \"regular\",                   res = 100,                   extent_x = c(0, ext), extent_y = c(0, ext)) plot(pts$pts)  plot(pts$rast, col = \"black\")   #----- # using point coordinates as input pt_input <- data.frame(x = c(0.5, 0.7), y = c(0.5, 0.3)) pts <- set_points(point_coordinates = pt_input) plot(pts$pts)  plot(pts$rast, col = \"black\")"},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_from_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate points using input raster as weights — set_points_from_raster","title":"Simulate points using input raster as weights — set_points_from_raster","text":"function simulates point patterns space using values input raster weights probabilities selecting point given location. designed simulate points based  neutral landscape models works input rasters well.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_from_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate points using input raster as weights — set_points_from_raster","text":"","code":"set_points_from_raster(base_raster, n_features = 1000)"},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_from_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate points using input raster as weights — set_points_from_raster","text":"base_raster [RasterLayer]  Input raster used defining weights. n_features [integer(1)=1000]  Total number features spread space.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_from_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate points using input raster as weights — set_points_from_raster","text":"coordinates (x,y) simulated points.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_from_raster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate points using input raster as weights — set_points_from_raster","text":"function works first selecting random pixels landscape finding centers, adding random variation within pixel define final point locations. based StackExchange useful answer \"Spacedman\": https://gis.stackexchange.com/questions/224321/randomly-generate-points-using-weights--raster IMPROVE: implement terra package","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_from_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate points using input raster as weights — set_points_from_raster","text":"","code":"#----- # minimal example  # example based on # https://gis.stackexchange.com/questions/224321/randomly-generate-points-using-weights-from-raster library(raster)  # raster set.seed(12) r <- raster::raster(matrix(runif(12),3,4))  # points pts <- set_points_from_raster(r, n_features = 300)  # plot raster::plot(r) points(pts)  # or # library(landscapetools) # library(ggplot2) # landscapetools::show_landscape(r) + #   geom_point(aes(x, y), data = pts)  # with terra r <- terra::rast(r) # points pts <- set_points_from_raster(r, n_features = 300)  #----- # using NLMR library(NLMR) #> Error in library(NLMR): there is no package called ‘NLMR’  # example NLM set.seed(123) nlm1 <- NLMR::nlm_mpd(100, 100, 100, roughness = .5) #> Error in loadNamespace(x): there is no package called ‘NLMR’  # points pts <- set_points_from_raster(nlm1, n_features = 1000) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'res': object 'nlm1' not found  # plot raster::plot(nlm1) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'nlm1' not found points(pts)   # or # landscapetools::show_landscape(nlm1) + #   geom_point(aes(x, y), data = pts)"},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate regular or random points in 2D — set_points_sample","title":"Simulate regular or random points in 2D — set_points_sample","text":"function simulates coordinates points either regularly randomly  distributed two dimensions. point patterns can also chosen, see type argument sf::st_sample function. points generated within input polygon bounding box input raster. spatial object used input, size landscape defined extent_x extent_y parameters. assumes landscape square rectangularly shaped.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate regular or random points in 2D — set_points_sample","text":"","code":"set_points_sample(   n_features = 1000,   type = c(\"regular\", \"random\")[1],   base_polygon = NULL,   extent_x = c(0, 1),   extent_y = extent_x )"},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate regular or random points in 2D — set_points_sample","text":"n_features [integer(1)=1000]  Total number points spread space. type [character(1)=\"regular\"]{\"regular\", \"random\"} Pattern creation points space. methods also accepted, check type argument sf::st_sample function. base_polygon [RasterLayer,sfc_POLYGON]  Polygon (class sf sfc) inside points created. RasterLayer, bbox raster used polygon. extent_x, entent_y [numeric vector(2)=c(0,1)]  Vector representing minimum maximum extent x y within points placed, format c(min,max).","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate regular or random points in 2D — set_points_sample","text":"data.frame (x,y) random coordinates.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/set_points_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate regular or random points in 2D — set_points_sample","text":"","code":"library(sf)  pts <- set_points_sample(100) plot(pts)  pts2 <- set_points_sample(100, type = \"random\") plot(pts2)   library(terra) library(stars) #> Error in library(stars): there is no package called ‘stars’ x <- rast(system.file(\"external/test.grd\", package=\"raster\")) pts3 <- set_points_sample(100, base_polygon = x) plot(pts3)"},{"path":"https://ninanor.github.io/oneimpact/reference/simulate_dist_dens.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate landscapes with features and calculate distance and densities of features — simulate_dist_dens","title":"Simulate landscapes with features and calculate distance and densities of features — simulate_dist_dens","text":"function combination set_points() calc_dist_dens(), simulate point pattern representing distribution point-type infrastructure space, rasterize , calculate distance density infrastructure.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/simulate_dist_dens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate landscapes with features and calculate distance and densities of features — simulate_dist_dens","text":"","code":"simulate_dist_dens(   n_features = 1000,   centers = 1,   width = 0.05,   res = 0.1,   extent_x = c(0, 1),   extent_y = c(0, 1),   buffer_around = 0,   transform_dist = NULL,   log_base = exp(1),   dist_offset = 1,   type_density = c(\"Gauss\", \"circle\", \"rectangle\")[1],   scale = 100,   extent_x_cut = extent_x,   extent_y_cut = extent_y )"},{"path":"https://ninanor.github.io/oneimpact/reference/simulate_dist_dens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate landscapes with features and calculate distance and densities of features — simulate_dist_dens","text":"n_features [integer(1)=1000]  Total number features spread space. centers [integer(1)=1]  Number centers around features placed. Used method = \"mobsim\". width [numeric(1)=0.05]  Mean distance features cluster center cluster. Used method = \"mobsim\". res [numeric(1)=0.1]  Resolution output raster. extent_x [numeric vector(2)=c(0,1)]  Vector representing minimum maximum extent x y within points placed, format c(min,max). buffer_around [numeric(1)=0.1]  Size buffer around extent landscape, avoid edge effects calculating densities using neighborhood analysis.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/simulate_dist_dens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate landscapes with features and calculate distance and densities of features — simulate_dist_dens","text":"RasterBrick de distance nearest feature densities scales selected.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/simulate_dist_dens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate landscapes with features and calculate distance and densities of features — simulate_dist_dens","text":"function builds upon function mobsim::sim_thomas_community() mobsim package. Originally function intended simulate positions multiple species context species abundance distribution studies, fits well case single species (point patterns single type feature). IMPROVE: implement rasterization terra package","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/simulate_dist_dens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate landscapes with features and calculate distance and densities of features — simulate_dist_dens","text":"","code":"library(mobsim) #> Error in library(mobsim): there is no package called ‘mobsim’ library(raster)  set.seed(1234)  # multiple focii ext <- 30000 wd <- 0.1*ext scales <- c(250, 500, 1000, 2500, 5000)/2 rasts <- simulate_dist_dens(n_features = 1000, centers = 5,                             width = wd, res = 100,                             extent_x = c(0, ext), extent_y = c(0, ext),                             buffer_around = 10000,                             type_density = \"Gauss\", scale = scales,                             extent_x_cut = c(0, ext), extent_y_cut = c(0, ext)) #> Error in simulate_dist_dens(n_features = 1000, centers = 5, width = wd,     res = 100, extent_x = c(0, ext), extent_y = c(0, ext), buffer_around = 10000,     type_density = \"Gauss\", scale = scales, extent_x_cut = c(0,         ext), extent_y_cut = c(0, ext)): could not find function \"simulate_dist_dens\" plot(rasts) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'plot': object 'rasts' not found"},{"path":"https://ninanor.github.io/oneimpact/reference/study_area.gpkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Study area: a polygon vector data — study_area.gpkg","title":"Study area: a polygon vector data — study_area.gpkg","text":"Dataset containing limits arbitrary study area Southern Norway, used illustrative purposes.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/study_area.gpkg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Study area: a polygon vector data — study_area.gpkg","text":"geopackage file. Projected CRS: ETRS89 / UTM zone 33N.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/study_area.gpkg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Study area: a polygon vector data — study_area.gpkg","text":"","code":"(s <- system.file(\"vector/study_area.gpkg\", package = \"oneimpact\")) #> [1] \"/home/runner/work/_temp/Library/oneimpact/vector/study_area.gpkg\" sf::st_read(s) #> Reading layer `study_area' from data source  #>   `/home/runner/work/_temp/Library/oneimpact/vector/study_area.gpkg'  #>   using driver `GPKG' #> Simple feature collection with 1 feature and 1 field #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 146900 ymin: 6622800 xmax: 194700 ymax: 6658900 #> Projected CRS: ETRS89 / UTM zone 33N # or terra::vect(s) #>  class       : SpatVector  #>  geometry    : polygons  #>  dimensions  : 1, 1  (geometries, attributes) #>  extent      : 146900, 194700, 6622800, 6658900  (xmin, xmax, ymin, ymax) #>  source      : study_area.gpkg #>  coord. ref. : ETRS89 / UTM zone 33N (EPSG:25833)  #>  names       :   cat #>  type        : <int> #>  values      :     1"},{"path":"https://ninanor.github.io/oneimpact/reference/zoi_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Zone of Influence (ZoI) functions — zoi_functions","title":"Zone of Influence (ZoI) functions — zoi_functions","text":"Computes Zone Influence (ZoI) decay functions. functions different shapes represent multiple ways ZoI infrastructure disturbance might affect given process space, ZoI radius (zoi_radius) controls far effect reaches. rate decay different ZoI functions parameterized based ZoI radius -- e.g slope linear_decay defined function decreases zero ZoI radius. functions can used transform arrays (Euclidean) distance values (one dimension) rasters (Euclidean) distance (two dimensions) ZoI values. distances might represent distance human infrastructure, sources disturbance, broadly type land use class spatial variable.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/zoi_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Zone of Influence (ZoI) functions — zoi_functions","text":"","code":"exp_decay(   x,   zoi_radius = NULL,   exp_decay_parms = c(1, 0.01),   zoi_limit = 0.05,   origin = 0,   half_life = NULL,   zoi_hl_ratio = NULL,   oneside = TRUE )  threshold_decay(   x,   zoi_radius,   constant_influence = 1,   origin = 0,   oneside = TRUE )  # S3 method for numeric threshold_decay(   x,   zoi_radius,   constant_influence = 1,   origin = 0,   oneside = TRUE )  # S3 method for SpatRaster threshold_decay(   x,   zoi_radius,   constant_influence = 1,   origin = 0,   oneside = TRUE )  step_decay(x, zoi_radius, constant_influence = 1, origin = 0, oneside = TRUE)  bartlett_decay(x, zoi_radius, intercept = 1, origin = 0, oneside = TRUE)  # S3 method for numeric bartlett_decay(x, zoi_radius, intercept = 1, origin = 0, oneside = TRUE)  # S3 method for SpatRaster bartlett_decay(x, zoi_radius, intercept = 1, origin = 0, oneside = TRUE)  tent_decay(x, zoi_radius, intercept = 1, origin = 0, oneside = TRUE)  linear_decay(x, zoi_radius, intercept = 1, origin = 0, oneside = TRUE)  gaussian_decay(   x,   zoi_radius = NULL,   hnorm_decay_parms = c(1, 0.01),   sigma = NULL,   zoi_limit = 0.05,   origin = 0,   ... )  half_norm_decay(   x,   zoi_radius = NULL,   hnorm_decay_parms = c(1, 0.01),   sigma = NULL,   zoi_limit = 0.05,   origin = 0,   ... )  dist_decay(   x,   zoi_radius = NULL,   type = c(\"exp_decay\", \"gaussian_decay\", \"linear_decay\", \"threshold_decay\")[1],   zoi_limit = 0.05,   origin = 0,   oneside = TRUE,   ... )"},{"path":"https://ninanor.github.io/oneimpact/reference/zoi_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Zone of Influence (ZoI) functions — zoi_functions","text":"x [numeric,SpatRaster,RasterLayer]  Euclidean distance infrastructure, source disturbance, feature/class interest. can single value, array values, raster object. must necessarily Euclidean distance, preferably distance measured meters, ease interpretation (e.g. geodesic distance). zoi_radius [numeric(1)]  Zone Influence (ZoI) radius, distance ZoI vanishes goes given minimum limit value zoi_limit. See details. exp_decay_parms [numeric(2)=c(1,0.01)]  exp_decay function, exponential decay parameters c(N, lambda), N maximum value function (x = 0) lambda decay parameter exponential function. value lambda considered draw exponential decay function zoi_radius = NULL half_life = NULL. zoi_limit [numeric(1)=0.05]  non-vanishing functions (e.g. exp_decay, gaussian_decay), value used set relationship ZoI radius decay functions: zoi_radius defined minimum distance x ZoI assumes values zoi_limit. default 0.05. parameter used zoi_radius NULL. origin [numeric(1)=0]  position (1 dimension) located infrastructure source disturbance? Default zero. raster objects, parameter ignored. half_life [numeric(1)=NULL]  Half life exponential decay function, meters. definition, half life distance exponential decay function reaches 0.5 maximum value. exp_decay function, ZoI radius parameter null (zoi_radius = NULL), value exponential half life (half_life = log(2)/lambda) can used parameterize exponential decay function. zoi_hl_ratio [numeric(1)=NULL]  exp_decay function, ZoI radius zoi_radius zoi_hl_ratio given half_life NULL, value used set ZoI radius (zoi_limit ignored). zoi_hl_ratio ratio ZoI radius value half life exponential function. instance, zoi_radius = 1200 zoi_hl_ratio = 6, means half_life 200. consequence, exponential decay ZoI function decreases 0.5 distance 200, ZoI radius = 1200 defined distance ZoI decreases 0.5**6 = 0.015625. oneside [logical(1)=TRUE]  FALSE, negative distance values considered symmetrically transformation always positive. general, parameter make sense raster objects. constant_influence [numeric(1)=1]  Constant value threshold (step) function within Zone Influence. Default 1. intercept [numeric(1)=1] Bartlett (linear tent decay) function, intercept maximum value function (x = 0). hnorm_decay_parms [numeric(2)=c(1,0.01)]  gaussian_decay function, guassian decay parameters c(N, lambda), N maximum value function (x = 0) lambda decay parameter Gaussian function. value lambda considered draw Gaussian decay function zoi_radius = NULL sigma = NULL. sigma [numeric(1)=NULL]  Standard deviation Gaussian function. related Gaussian decay rate \\(\\lambda\\) lambda = 1/(2*sigma^2). considered compute ZoI gaussian_decay function ZoI radius parameter null (zoi_radius = NULL). type [character(1)=\"Gauss\"]{\"Gauss\", \"exp_decay\", \"bartlett\", \"linear\", \"tent\", \"threshold\", \"step\"}  Type shape decay distance. Gauss half_norm, ZoI follows half-normal shape: N_0 * exp(-lambda * (euclidean_distance^2)). N_0 lambda parameters defined -- see zoi_functions details. exp_decay, ZoI follows exponential decay shape: N_0 * exp(-lambda * euclidean_distance). N_0 lambda parameters defined -- see zoi_functions details. bartlett, linear_decay, tent_decay, ZoI follows linear decay shape within ZoI radius (zoi_radius). threshold step, constant influence consider within zone influence radius (zoi_radius). pixels closer zoi_radius infrastructure considered \"influence\" nearest feature, constant influence value defined constant_influence parameter, pixels assumed zero influence.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/zoi_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Zone of Influence (ZoI) functions — zoi_functions","text":"ZoI values given array x values, raster object delimiting ZoI x corresponds distance infrastructure disturbance sources 2 dimensional space.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/zoi_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Zone of Influence (ZoI) functions — zoi_functions","text":"threshold function (threshold_decay) linear decay function (linear_decay), ZoI radius (zoi_radius) distance x ZoI function value decreases zero. linear decay, done setting slope linear function -intercept/zoi_radius, intercept intercept linear function (, maximum value x = 0). non-vanishing functions approach zero asymptotically (exp_decay, gaussian_decay), certain limit value must given define ZoI radius -- ZoI radius defined distance x ZoI function goes limit value. functions, different parameters available setting relationship ZoI function value ZoI radius. functions multiple possible names, sake flexibility: linear_decay(), bartlett_decay(), tent_decay() function; threshold_decay() step_decay() function; gaussian_decay() half_norm_decay() function. functions might implemented.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/zoi_functions.html","id":"definitions","dir":"Reference","previous_headings":"","what":"Definitions","title":"Zone of Influence (ZoI) functions — zoi_functions","text":"formal definitions ZoI functions \\(\\phi(d_i, r)\\), \\(d_i\\) distance feature \\(\\) infrastructure source disturbance \\(r\\) ZoI radius: threshold_decay: threshold step decay function \\(\\phi_{threshold}\\) positive constant within ZoI radius \\(r\\), null \\(x \\ge r\\): $$ \\phi_{threshold}(d_i, r_k) = c d_i < r, 0 otherwise $$ \\(c\\) constant value (default = 1). linear_decay: linear (tent/Bartlett) decay function \\(\\phi_{linear}\\) decreases linearly maximum value \\(b\\) (intercept, default = 1) zero \\(x \\ge r\\): $$\\phi_{linear}(d_i, r) = b - b/r x < r, 0 otherwise$$ exp_decay: exponential decay function \\(\\phi_{exp}\\) decreases exponentially maximum value \\(N\\) (default = 1) rate \\(\\lambda\\), defined \\(r\\) ZoI limit value \\(\\phi_{lim}\\), small ZoI value effect considered negligible: $$\\phi_{exp}(d_i, r, \\phi_{lim}) = N exp(-\\lambda d_i)$$ $$\\lambda = ln(1/\\phi_{lim}) / r$$ context, ZoI radius \\(r\\) distance beyond \\(\\phi_{exp} < \\phi_{lim}\\). gaussian_decay: Gaussian decay function \\(\\phi_{Gauss}\\) follows Gaussian (half-normal) decay maximum \\(N\\) (default = 1) decay rate \\(\\lambda\\) defined \\(r\\) ZoI limit value \\(\\phi_{lim}\\), small ZoI value effect considered negligible: $$\\phi_{Gauss}(d_i, r, \\phi_{lim}) = N exp(-\\lambda d_i^2)$$ $$\\lambda = ln(1/\\phi_{lim}) / (r^2)$$ context, ZoI radius \\(r\\) distance beyond \\(\\phi_{exp} < \\phi_{lim}\\). Note \\(\\lambda\\) defined differently gaussian_decay exp_decay functions.","code":""},{"path":"https://ninanor.github.io/oneimpact/reference/zoi_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Zone of Influence (ZoI) functions — zoi_functions","text":"","code":"library(ggplot2)  # test influence functions  # exponential decay exp_decay(10, zoi_radius = 30) #> [1] 0.3684031  f1 <- ggplot(data.frame(x = c(0, 30)), aes(x = x)) +   stat_function(fun = exp_decay, args = list(zoi_radius = 20)) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   theme_bw() f1   # exponential decay - two sides f1_2 <- ggplot(data.frame(x = c(-30, 30)), aes(x = x)) +   stat_function(fun = exp_decay,                 args = list(zoi_radius = 20, oneside = FALSE)) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   theme_bw() f1_2   # threshold threshold_decay(5, zoi_radius = 10) #> [1] 1 threshold_decay(10, zoi_radius = 10) #> [1] 0  f2 <- ggplot(data.frame(x = c(0, 30)), aes(x = x)) +   stat_function(fun = threshold_decay,                 args = list(zoi_radius = 20), linetype = 2) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   theme_bw() f2   # threshold - two sides f2_2 <- ggplot(data.frame(x = c(-30, 50)), aes(x = x)) +   stat_function(fun = threshold_decay,                 args = list(zoi_radius = 20, oneside = FALSE), linetype = 2) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   theme_bw() f2_2   # linear, tent, or bartlett decay bartlett_decay(5, zoi_radius = 10) #> [1] 0.5 bartlett_decay(8, zoi_radius = 10) #> [1] 0.2  f3 <- ggplot(data.frame(x = c(0, 30)), aes(x = x)) +   stat_function(fun = bartlett_decay, args = list(zoi_radius = 20), linetype = 3) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   theme_bw() f3   # linear, two sides f3_3 <- ggplot(data.frame(x = c(-30, 40)), aes(x = x)) +   stat_function(fun = bartlett_decay,                 args = list(zoi_radius = 20, origin = 10, oneside = FALSE), linetype = 3) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   theme_bw() f3_3   # guassian or half normal gaussian_decay(5, sigma = 6) #> [1] 0.7066483  f4 <- ggplot(data.frame(x = c(0, 30)), aes(x = x)) +   stat_function(fun = gaussian_decay,                 args = list(zoi_radius = 20, zoi_limit = 0.05), linetype = 4) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   geom_vline(xintercept = 20, linetype = 2, color = \"darkgrey\") +   geom_hline(yintercept = 0.05, linetype = 2, color = \"darkgrey\") +   theme_bw() f4   # half normal - two sides gaussian_decay(5, sigma = 6) #> [1] 0.7066483  f4_2 <- ggplot(data.frame(x = c(-30, 30)), aes(x = x)) +   stat_function(fun = gaussian_decay,                 args = list(zoi_radius = 20, zoi_limit = 0.05), linetype = 4) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   geom_vline(xintercept = c(-20, 20), linetype = 2, color = \"darkgrey\") +   geom_hline(yintercept = 0.05, linetype = 2, color = \"darkgrey\") +   theme_bw() f4_2   # plot several ZoI with the same radius f1 +   stat_function(fun = threshold_decay, args = list(zoi_radius = 20), linetype = 2) +   stat_function(fun = bartlett_decay, args = list(zoi_radius = 20), linetype = 3) +   stat_function(fun = gaussian_decay, args = list(zoi_radius = 20, zoi_limit = 0.05), linetype = 4) +   labs(x = \"Distance\", y = \"Zone of Influence\") +   theme_bw()   # generic dist_decay function dist_decay(500, zoi_radius = 1000, type = \"exp_decay\") #> [1] 0.2236068 dist_decay(500, zoi_radius = 1000, type = \"gaussian_decay\") #> [1] 0.4728708 dist_decay(500, zoi_radius = 1000, type = \"linear_decay\") #> [1] 0.5 dist_decay(500, zoi_radius = 1000, type = \"step_decay\") #> [1] 1  # applying dist_decay functions for rasters library(terra)  # calculate Euclidean distance f <- system.file(\"raster/cabins.tif\", package = \"oneimpact\") cabins <- terra::rast(f) cabins_dist <- calc_zoi_nearest(cabins, type = \"euclidean\")  # transform Euclidean in distance decay plot(dist_decay(cabins_dist, zoi_radius = 1000, type = \"exp_decay\"))  plot(dist_decay(cabins_dist, zoi_radius = 1000, type = \"tent_decay\"))"}]
