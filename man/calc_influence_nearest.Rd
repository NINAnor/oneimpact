% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_influence_nearest.R
\name{calc_influence_nearest}
\alias{calc_influence_nearest}
\title{Calculate the influence from the nearest feature}
\usage{
calc_influence_nearest(
  x,
  zoi = NULL,
  transform = NULL,
  log_base = exp(1),
  zoi_hl_ratio = 4,
  half_life = NULL,
  exp_decay_parms = c(1, 0.01),
  dist_offset = 1,
  extent_x_cut = terra::ext(x)[c(1, 2)],
  extent_y_cut = terra::ext(x)[c(3, 4)],
  plotit = FALSE,
  ...
)
}
\arguments{
\item{x}{\verb{[RasterLayer,SpatRaster]} \cr Raster representing locations of features, with value 1
(or any other positive value) where the features are located and NA elsewhere.
Can be a \linkS4class{Raster} object (e.g. \code{RasterLayer}) from \link{raster-package} or a
\link{SpatRaster} from \link{terra-package}.
The features might be represented by points (e.g. houses, cabins, wind turbines), lines
(e.g. roads, power lines, railways), or polygons (e.g. mining areas, urban areas, or
any other spatial variable represented as polygons or areas).}

\item{zoi}{\verb{[numeric(1)=NULL]} \cr Zone of Influence (ZoI), in map units meters.
The ZoI is the distance, scale, or buffer size around a feature up to which we consider there is
an effect or influence of an infrastructure or variable. It is considered only when
\code{transform = "bartlett"} or \code{transform = "exp_decay"}. \cr
For the Bartlett influence, it corresponds to the distance beyond which the distance is zero. \cr
For the exponential decay influence, the ZoI is used to define the half-life and the lambda
of the exponential decay function, based on the parameter \code{zoi_hl_ratio},
that defines the ratio between the ZoI and the half-life. Since the half-life is the value
where the exponential decay decreases by \code{0.5}, a ratio of, for instance, \code{zoi_hl_ratio = 4} (default)
would mean that the ZoI is defined as the value where the exponential decay decreases to \code{0.5^4 = 0.0625}.
In this case, if \code{zoi = 4000} m, this means that the ZoI is four times higher than the half-life, i.e.
\code{half_life = 1000} and \code{lambda = log(2)/half_life = 6.93e-4}. The definition of a zone of
influence does not imply a cuttoff of the exponential decay function but is only used to define
its parameters, based on the defined \code{zoi_hl_ratio} parameter.}

\item{transform}{\verb{[character(1)=NULL]\{"log","sqrt", "exp_decay", "bartlett"\}} \cr
By default, NULL, when the measure of influence is the Euclidean distance to the nearest
feature.
\itemize{
\item If \code{log}, the influence measure is the log-distance: \code{log(euclidean_distance, base = log_base)}.
\item If \code{sqrt}, the influence measure is the square rooted distance: \code{sqrt(euclidean_distance)}.
\item If \code{exp_decay}, the influence measure is the exponential decay distance: \cr
\code{N_0 * exp(-lambda * euclidean_distance)}. \code{N_0} and \code{lambda} are parameters to be defined.
The decayment rate lambda might be defined in terms of the exponential half-life or
a definition of zone of influence (ZoI).
\item If \code{bartlett}, the influence measure is a triangular tent-shaped decay distance is returned.
}
See details below.
Other options still to be implemented (such as other functions and a generic user-defined
function as input).}

\item{log_base}{\verb{[numeric(1)=exp(1)]} \cr Base of the logarithm, if \code{transform = log}.}

\item{zoi_hl_ratio}{\verb{[numeric(1)=6]} \cr Ratio between the zone of influence (ZoI) of the infrastrucure
and the half-life of the exponential decay distance function. It is used to define the
the half-life and decay parameter lambda of the exponential decay function, based on a value of ZoI.
By changing this parameter, one can be more or less flexible in the definition of ZoI for
the exponential decay influence.
For example: if \code{zoi_hl_ratio = 4}, the ZoI is defined as the distance from the nearest infrastructure
where the decay distance influence decreases to \code{0.5^4 = 0.0625}. If \code{zoi_hl_ratio = 6}, the ZoI
is defined as tyhe distance when the exponential decay influence decreases to \code{0.5^6 = 0.015625}}

\item{half_life}{\verb{[numeric(1)=NULL]} \cr Half-life of the exponential decay function, in case
\code{transform = exp_decay}. The exponential decay exponent (lambda) from the exponential function is defined as
\code{lambda = log(2)/half_life}. By definition, when one gets away from the source feature by a
distance interval equals to \code{half_life}, the magnitude of the exponential decay distance decreases by 1/2.
This means that, for instance, at a distance of \code{4*half_life} to the nearest feature, the exponential decay
influence has a magnitude of \code{(1/2)^4 = 1/16 ~ 0.06}. This can be useful to define the
Zone of Influence (ZoI) for exponential decay distances. If the \code{zoi} parameter is not NULL, the
\code{half_life} parameter is ignored and half-life of the exponential decay is defined by the \code{zoi} and
\code{zoi_hl_ratio} parameters.}

\item{exp_decay_parms}{\verb{[numeric(2)=c(1,0.01)]} \cr Parameters (\code{N_0}, \code{lambda}) for the exponential decay
influence, if \code{transform = exp_decay}. The value of \code{lambda} defined here is used only if
\code{zoi = NULL} and \code{half_life = NULL}, otherwise one of these parameters is used to determine \code{lambda}.
By default, \code{N_0} is defined as 1, which means the influence is 1 where the infrastructure feature
is located, and it decreases as the Euclidean distance from it increases.}

\item{dist_offset}{\verb{[numeric(1)=1]} \cr Number to add to the Euclidean distance before transforming it,
to avoid \code{-Inf}/\code{Inf} values (e.g. in the case of log). It should be a very small value compared to the
range of values of Euclidean distance, not to influence any further analyses.}

\item{extent_x_cut, entent_y_cut}{\verb{[numeric vector(2)=c(0,1)]} \cr Vectors representing the minimum and
maximum extent in x and y for the final output, in the format c(min,max). Used to cut the raster to
specific smaller extents. The default is to keep the same extent of the input raster.}

\item{plotit}{\verb{[logical(1)=FALSE]} \cr Should the outputs be plotted along the calculation?}

\item{...}{\cr Adittional parameters passed to \code{\link[terra:distance]{terra::distance()}}.}
}
\value{
A \code{RasterLayer} (or \code{SpatRaster}, according to the class of the input object) with the
influence of the nearest feature. By default, it is the Euclidean distance to the nearest feature.
Depending on the choice of \code{transform}, the output distance can be log- or sqrt-transformed distance,
or one can choose to calculate the exponential decay or Bartlett decay influence.
Other types of transformation (e.g. Gaussian?) to be implemented in the future.
}
\description{
This function takes in a raster with locations of infrastructure and calculates
a raster representing the influence to each pixel from the neareast feature of that type
of infrastructure. By default, the output measure of influence is the Euclidean distance
to the nearest feature. However, this influence measure can be changed to
transformed distance measures (so far, log- and sqrt-distance) or to decay distance functions
(so far, exponential decay distance and Bartlett distance). For the decay distance
measures of influence, a zone of influence (zoi) might be used as input for designing
the curve.
}
\details{
The input raster should have positive values in the pixels where infrastructure
are located and NA/no-data in all other places. The input raster is supposed to
represent the location of point, line, or polygon infrastructure (e.g. houses, roads, mining areas),
but any landscape variable whose representation might be one of those would fit here
(e.g. areas of forest or any other habitat type or land cover). We recommend that the
input raster is on a metric projection, so that distances and influence measures are
based on distance to infrastructure measured in meters.

Explain here better what is the log, sqrt, exp_decay, bartlett, and when a ZOI is defined.

TO IMPROVE3: do the same in communication with GRASS GIS.
TO IMPROVE4: implement any generic funtion as input to "transform".
}
\examples{
library(mobsim)
library(terra)
library(dplyr)
library(sf)

set.seed(1234)

# set points
ext <- 30000
wd <- ext/20
pts <- set_points(n_features = 1000, centers = 1,
                  width = wd, res = 100,
                  extent_x = c(0, ext), extent_y = c(0, ext))
plot(pts$pts)
plot(pts$rast)

# calculate distance to the nearest feature
d <- influence_nearest(pts$rast)
plot(d)

# calculate log_dist (the rest is equal)
log_d <- influence_nearest(pts$rast, transform = "log", log_base = 10)
plot(log_d)

# calculate sqrt_dist
sqrt_d <- influence_nearest(pts$rast, transform = "sqrt")
plot(sqrt_d)

# calculate exponential decay influence using exp_decay_parms parameter
exp_d1 <- influence_nearest(pts$rast, transform = "exp_decay", exp_decay_parms = c(1, 0.001))
plot(exp_d1)

# calculate exponential decay influence using half life parameter
# if half_life = 250 m and zoi_hl_ratio = 4, zoi is 1000 m
half_life2 <- 250 # intensity gets down to 1/16 = 0.06 for 4*half_life=1000m
zoi_hl_ratio2 <- 4 # default
exp_d2 <- influence_nearest(pts$rast, transform = "exp_decay", half_life = half_life2)
plot(exp_d2)
# buffer
pts_shp <- pts$pts \%>\% 
  sf::st_as_sf(coords = c(1,2))
# half_life = 250m
pts_shp \%>\% 
  sf::st_buffer(dist = half_life2) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T, border = "red")
# zoi = 1000m
pts_shp \%>\% 
  sf::st_buffer(dist = half_life2*zoi_hl_ratio2) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T, border = "black")
legend("bottomright", legend = c("half life", "ZoI"), col = c("red", "black"), lwd=1.1)

# calculate exponential decay influence using zoi parameter
zoi3 <- 4000 # intensity gets down to 1/16 = 0.06 for zoi = 4000m, half_life = 1000m
zoi_hl_ratio3 <- 4 # default
exp_d3 <- influence_nearest(pts$rast, transform = "exp_decay", zoi = zoi3)
plot(exp_d3)
# buffer
pts_shp <- pts$pts \%>\% 
  sf::st_as_sf(coords = c(1,2))
# half_life = 1000m
pts_shp \%>\% 
  sf::st_buffer(dist = zoi3/zoi_hl_ratio3) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T, border = "red")
# zoi = 4000m
pts_shp \%>\% 
  sf::st_buffer(dist = zoi3) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T, border = "black")
legend("bottomright", legend = c("half life", "ZoI"), col = c("red", "black"), lwd=1.1)

# one can also change the definition of zoi, to zoi = half_life = 6, for instance
# when the intensity decreases to 1/64 = 0.016
zoi4 <- 4000 
zoi_hl_ratio4 = 6
exp_d4 <- influence_nearest(pts$rast, transform = "exp_decay", zoi = zoi4, 
                    zoi_hl_ratio = zoi_hl_ratio4)
plot(exp_d4)
# buffer
pts_shp <- pts$pts \%>\% 
  sf::st_as_sf(coords = c(1,2))
# 667m (4000/6)
pts_shp \%>\% 
  sf::st_buffer(dist = zoi4/zoi_hl_ratio4) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T, border = "red")
# 1000m
pts_shp \%>\% 
  sf::st_buffer(dist = zoi4) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T, border = "black")
legend("bottomright", legend = c("half life", "ZoI"), col = c("red", "black"), lwd=1.1)

# bartlett influence, ZOI = 2000m
bart_d <- influence_nearest(pts$rast, transform = "bartlett", zoi = 2000)
plot(bart_d)

# buffer 2000m
pts_shp \%>\% 
  sf::st_buffer(dist = 2000) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T, border = "black")
legend("bottomright", legend = c("ZoI"), col = c("black"), lwd=1.1)
}
