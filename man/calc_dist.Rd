% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_dist.R
\name{calc_dist}
\alias{calc_dist}
\title{Calculate distance from the nearest feature}
\usage{
calc_dist(
  points,
  transform_dist = NULL,
  log_base = exp(1),
  half_life = NULL,
  exp_decay_parms = c(1, 0.01),
  bartlett_zoi = NULL,
  dist_offset = 1,
  extent_x_cut = terra::ext(points)[c(1, 2)],
  extent_y_cut = terra::ext(points)[c(3, 4)],
  plotit = FALSE
)
}
\arguments{
\item{points}{\verb{[RasterLayer,SpatRaster]} \cr Raster representing locations of features, with 1 where the features
are located and NA elsewhere. Can be a \link{RasterLayer} from \link{raster} package or a \link{SpatRaster} from
\link{terra} package.}

\item{transform_dist}{\verb{[character(1)=NULL]\{"log","sqrt", "exp_decay", "bartlett\}} \cr
By default, NULL - distances are no transformed. If \code{log}, the distances are
log-transformed. If \code{sqrt}, the output is \code{sqrt(distance)}. If \code{exp_decay}, the exponential
decay distance is calculated. If \code{bartlett}, a triangular tent-shaped decay distance is returned.
See details below.
Other options still to be implemented.}

\item{log_base}{\verb{[numeric(1)=exp(1)]} \cr Base of the logarithm, if \code{transform_dist = log}.}

\item{half_life}{\verb{[numeric(1)=NULL]} \cr Half life of the exponential decay function, in case
\code{transform_dist = exp_decay}. The lambda exponent from the exponential funcion is defined as
\code{lambda = log(2)/half_life}. By definition, t each distance interval equals to \code{half_life} from the
source features, the magnitude of the exponential decay distance decreases by 1/2. This means that,
for instance, at a distance of \code{4*half_life} to the nearest feature, the exponential decay distance
has a magnitude of 1/16 ~ 0.06. This can be useful to define the Zone of Influence for exponential
decay distances.}

\item{exp_decay_parms}{\verb{[numeric(2)=c(1,0.01)]} \cr Parameters (\code{N_0}, \code{lambda}) for the exponential decay
distance, if \code{transform_dist = exp_decay}. The value of \code{lambda} define here is used only if \code{half_life = NULL},
otherwise the value of \code{half_life} is used to determine \code{lambda}.}

\item{bartlett_zoi}{\verb{[numeric(1)=NULL]} \cr Zone of Influence (ZoI) of the Bartlett distance, if
\code{transform_dist = bartlett}. It corresponds to the distance beyonf which the distance is zero.}

\item{dist_offset}{\verb{[numeric(1)=1]} \cr Number to add to distance before transforming it,
to avoid \code{-Inf}/\code{Inf} values (e.g. in the case of log). It should be a very small value compared to the
range of values of distance.}

\item{extent_x_cut, entent_y_cut}{\verb{[numeric vector(2)=c(0,1)]} \cr Vectors representing the minimum and
maximum extent in x and y for the final output, in the format c(min,max). The default is to
keep the same extent of the input raster.}

\item{plotit}{\verb{[logical(1)=FALSE]} \cr Should the outputs be plotted along the calculation?}
}
\value{
A \code{RasterLayer} (or \code{SpatRaster}, depending on the input) with the distance to the nearest feature.
Depending on the choice of \code{transform_dist}, the output distance can be log- or sqrt-transformed, or one can choose to calculate
the exponential decay or Bartlett decay distance. Other types of transformation (e.g. Gaussian?)
to be implemented in the future.
}
\description{
This function takes in a raster with locations of infrastructure and calculates
a raster representing the distance from each pixel to the neareast feature.
The output distance can be transformed (so far, with the options log-distance, sqrt-distance,
exponential decay distance, Bartlett distance).
}
\details{
Explain here better what is the log, sqrt, exp_decay, bartlett, and when a ZOI is defined.

TO IMPROVE1: implement with \code{terra}. Seems Ok. WE SHOULD DETECT IF THE INPUT IS RASTER OR TERRA

TO IMPROVE2: define ZOI parameters, defined for exp decay given a certain ratio.

TO IMPROVE3: do the same in communication with GRASS GIS.
}
\examples{
library(mobsim)
library(terra)
library(dplyr)
library(sf)

set.seed(1234)

# set points
ext <- 30000
wd <- ext/20
pts <- set_points(n_features = 1000, centers = 1,
                  width = wd, res = 100,
                  extent_x = c(0, ext), extent_y = c(0, ext))
plot(pts$pts)
plot(pts$rast)

# calculate distance to the nearest feature
d <- calc_dist(pts$rast)
plot(d)

# calculate log_dist (the rest is equal)
log_d <- calc_dist(pts$rast,
                   transform_dist = "log", log_base = 10)
plot(log_d)

# calculate sqrt_dist
sqrt_d <- calc_dist(pts$rast, transform_dist = "sqrt")
plot(sqrt_d)

# calculate exponential decay distance
exp_d1 <- calc_dist(pts$rast, transform_dist = "exp_decay", exp_decay_parms = c(1, 0.001))
plot(exp_d1)
# using half life
half_life <- 1000 # intensity gets down to 1/16 = 0.06 for 4*half_life
exp_d2 <- calc_dist(pts$rast, transform_dist = "exp_decay", half_life = 1000)
plot(exp_d2)
# buffer
pts_shp <- pts$pts \%>\% 
  sf::st_as_sf(coords = c(1,2))
# 1000m
pts_shp \%>\% 
  sf::st_buffer(dist = 1000) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T)
# 4000m
pts_shp \%>\% 
  sf::st_buffer(dist = 4000) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T)

# bartlett distance, ZOI = 2000m
bart_d <- calc_dist(pts$rast,
                    transform_dist = "bartlett", bartlett_zoi = 2000)
plot(bart_d)
# buffer 2000m
pts_shp \%>\% 
  sf::st_buffer(dist = 2000) \%>\% 
  sf::st_union() \%>\% 
  plot(add = T)
}
