% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_filter.R
\name{create_filter}
\alias{create_filter}
\title{Create filters for raster neighborhood analyses}
\usage{
create_filter(
  zoi = NULL,
  res = 100,
  method = c("exp_decay", "step", "bartlett")[1],
  half_life = NULL,
  zoi_hl_ratio = 4,
  min_intensity = 0.01,
  max_dist = 5000,
  normalize = FALSE,
  round_vals = 3,
  save_txt = FALSE,
  save_format = "GRASS",
  save_folder = ".",
  output = c("CumInf", "Densiy")[1],
  paralell = TRUE
)
}
\arguments{
\item{zoi}{\verb{[numeric(1)]} \cr Zone of Influence (ZoI), in meters. The ZoI is distance or scale up to
which we consider there is effect of an infrastructure or variable for setting the filter.}

\item{res}{\verb{[numeric(1)=100]} \cr Resolution (pixel size) of the filter.}

\item{half_life}{\verb{[numeric(1)]} \cr Half life parameter of the exponential decay function, in meters. If NULL,
the half life is define in terms of the ZoI and the \code{zoi_hl_ratio} parameter, which defines the ratio
between the ZoI and the half life. By default, we set this ratio as \code{zoi/half_life = 4}.
The exponent of the exponential decay distance function is defined as \code{lambda = log(2)/half_life}.}

\item{zoi_hl_ratio}{\verb{[numeric(1)=6]} \cr Ratio between the ZoI and the half life of the exponential decay
distance function. It is used to define the ZoI for the exponential decay function. For instance, if
\code{half_life = 1000} and \code{zoi_hl_ratio = 4}, the ZoI will be 4000 m (when the exponential decay decrease to
\code{0.5**4 = 0.0625}.}

\item{min_intensity}{\verb{[numeric(1)=0.01]} \cr Minimum intensity of the exponential decay function to
define the size (radius) of the window that define the filter.}

\item{max_dist}{\verb{[numeric(1)=50000]} \cr Maximum size (in meters) to
define the size (radius) of the window that define the filter.}
}
\value{
A matrix with the weight values.
}
\description{
This function creates matrices of weights following different
functions to be used in neighborhood analyses for rasters. It is possible
to export these matrices as text files, for use with external softwares
such as the r.mfilter module within GRASS GIS.
}
\details{
\subsection{COMPARE WITH smoothie::kernel2dsmooth and smoothie::kernel2dmeitsjer, maybe wrap some options here}{
}

\subsection{POLSSIBLY: IMPLEMENT IN THE SAME WAY AS FOCAL, WITH INPUT RASTER AS ARGUMENT, POSSIBLY}{
}

\subsection{check: if the outer ring of the matrix is all zero, remove it}{
}
}
\examples{
library(terra)
library(raster)
library(dplyr)

# load example raster in metric system
f <- system.file("ex/elev.tif", package="terra")
r <- rast(f) \%>\% 
  terra::project("EPSG:32631")
terra::ext(r)[1:2] \%>\% diff

# create exponential filter
filt_exp1000 <- create_filter(zoi = 1000, method = "exp_decay",
                              max_dist = 5000,
                              res = res(r)[1], normalize = T)
filt_exp3000 <- create_filter(zoi = 3000, method = "exp_decay", 
                              max_dist = 5000,
                              res = res(r)[1], normalize = T)
# use exponential filter
neigh_r_exp1000 <- terra::focal(r, filt_exp1000, fun = "sum", 
                                na.policy="omit", na.rm=TRUE)
neigh_r_exp3000 <- terra::focal(r, filt_exp3000, fun = "sum", 
                                na.policy="omit", na.rm=TRUE)

# plot
plot(c(r, neigh_r_exp1000, neigh_r_exp3000),
     main = c("original", "exp filter 1000m", "exp filter 3000m"))

# create step filter
filt_step3000 <- create_filter(zoi = 3000, method = "step",
                               res = res(r)[1], normalize = T)
# use step filter
neigh_r_step3000 <- terra::focal(r, filt_step3000, fun = "sum", 
                                 na.policy="omit", na.rm=TRUE)

# plot
plot(c(neigh_r_exp3000, neigh_r_step3000), 
     main = c("exp filter 3000m", "step filter 3000m"))
# plot(app(c(neigh_r_exp3000, neigh_r_step3000), "diff"))

# create bartlett filter
filt_bart3000 <- create_filter(zoi = 3000, method = "bartlett",
                               res = res(r)[1], normalize = T)
# use bartlett filter
neigh_r_bart3000 <- terra::focal(r, filt_bart3000, fun = "sum",
                                 na.policy="omit", na.rm=TRUE)

# plot
plot(c(neigh_r_exp3000, neigh_r_step3000, neigh_r_bart3000), 
     main = c("exp filter 3000m", "step filter 3000m", "Bartlett filter 3000m"))
# plot(app(c(neigh_r_exp3000, neigh_r_bart3000), "diff"))
# plot(app(c(neigh_r_step3000, neigh_r_bart3000), "diff"))
}
