% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/calc_zoi.R
\name{calc_zoi}
\alias{calc_zoi}
\title{Calculates the zone of influence from the nearest feature
and the cumulative zone of influence of multiple features}
\usage{
calc_zoi(
  x,
  zoi_radius,
  transform_nearest = NULL,
  type_cumulative = c("circle", "Gauss", "rectangle", "mfilter")[1],
  extent_x_cut = bbox(x)[1, ],
  extent_y_cut = bbox(x)[2, ],
  ...
)
}
\arguments{
\item{x}{\verb{[RasterLayer,SpatRaster]} \cr Raster representing locations of features,
preferentially with value 1 (or any other positive value) where the features
are located and NA elsewhere. Alternatively, \code{x} might be a binary (dummy)
spatial variable representing the presence of linear or area features, with
NA/no-data as background.
\code{x} can be a \code{RasterLayer} from \link{raster} package or a \link{SpatRaster} from
\link{terra} package. If \code{where = "GRASS"}, \code{x} must be a string corresponding
to the name of the input map within a GRASS GIS location and mapset.
Maps without NA as background might be prepared as input for \code{calc_zoi_nearest}
through \href{https://rspatial.org/terra/pkg/4-algebra.html}{raster algebra} in R
and e.g. through the use of the module
\href{https://grass.osgeo.org/grass80/manuals/r.null.html}{\code{r.null}} in GRASS GIS.}

\item{zoi_radius}{\verb{[numeric(1)]} \cr Zone of Influence (ZoI) radius,
the distance at which the ZoI vanishes or goes below a given minimum limit value
\code{zoi_limit}. See \link{zoi_functions} for details. This parameter is
ignored if \code{type = "euclidean"}, \code{type = "log"}, or \code{type = "sqrt"}.}

\item{extent_x_cut}{\verb{[numeric vector(2)=c(0,1)]} \cr Vector
representing the minimum and
maximum extent in x and y for the final output, in the format c(min,max).
It is intended to keep only a region of interest, for standardizing the
parameters and region when comparing the resulting ZoI maps with the
cumulative ZoI, calculated through \link{calc_zoi_cumulative}.}

\item{...}{\cr Adittional parameters passed to \code{\link[terra:distance]{terra::distance()}}
or to the ZoI functions (see \link{zoi_functions}) when the
calculations are performed in R.
No additional parameters implemented for computation in GRASS GIS.}
}
\value{
A RasterBrick with de distance to the nearest feature and the densities for all scales selected.
}
\description{
This function takes in a raster with locations of infrastructure and calculates (1)
a raster representing the distance from each pixel to the neareast feature and (2)
a raster (or set of rasters, in case there is more the one value for \code{scale})
representing the density of features in space (through a spatial filter/neighborhood analysis).
The neighborhood analysis is done with the \code{\link[raster:focal]{raster::focal()}} function.
}
\details{
The neighborhood analysis can be done with different methods. The default is a Gaussian filter
(\code{type_density = "Gauss"}), in which case scale corresponds to the sigma paramater of the Gaussian
filter. If \code{type_density = "circle"} or \code{type_density = "rectangle"}, the scale corresponds to the
radius of the circle or width of the rectangle, respectively. See \code{\link[raster:focalWeight]{raster::focalWeight()}} for more
details.

TO IMPROVE2: do the same in communication with GRASS GIS.
}
\examples{
library(mobsim)
library(raster)

set.seed(1234)

# set points
ext <- 30000
wd <- ext/20
pts <- set_points(n_features = 1000, centers = 1,
                  width = wd, res = 100,
                  extent_x = c(0, ext), extent_y = c(0, ext),
                  buffer_around = 10000)
plot(pts$pts)
plot(pts$rast)

# calculate distance and densities considering only the initial extent
zoi_values <- c(250, 500, 1000, 2500, 5000)/2
nearest_cumulative <- calc_zoi(pts$rast, zoi = zoi_values,
                                     type_cumulative = "Gauss",
                                     extent_x_cut = c(0, ext), extent_y_cut = c(0, ext))
plot(nearest_cumulative)

# calculate exp_decay (the rest is equal)
log_dist_dens <- calc_zoi(pts$rast, type_density = "Gauss", scale = scales,
                                transform_dist = "exp_decay", half_life = 200,
                                extent_x_cut = c(0, ext), extent_y_cut = c(0, ext))
plot(log_dist_dens)


# set points
ext <- 30000
wd <- ext/20
pts <- set_points(n_features = 1000, centers = 1,
                  width = wd, res = 100,
                  extent_x = c(0, ext), extent_y = c(0, ext),
                  buffer_around = 0)
plot(pts$pts)
plot(pts$rast)

# calculate distance and densities considering only the initial extent
scales <- c(250, 500, 1000, 2500, 5000)/2
dist_dens <- calc_zoi(pts$rast, type_density = "Gauss", scale = scales, pad = T)
plot(dist_dens)
}
